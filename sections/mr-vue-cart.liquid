<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css"
  integrity="sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ=="
  crossorigin="anonymous"
  referrerpolicy="no-referrer">

<script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>

{% assign si = section.id %}
{% assign ss = section.settings %}

<div id="cart-{{ si }}" aria-live="polite">
  <div
    :class="['cart-background-{{ si }}', { 'show-background-{{ si }}': cartOpen }]"
    @click="openCart"
    role="button"
    tabindex="0"
    aria-label="Close cart"></div>
  <div
    :class="['cart-{{ si }}', { 'open-cart-{{ si }}': cartOpen }]"
    role="dialog"
    aria-modal="true"
    aria-label="Shopping cart">
    <form
      style="height: 100%;"
      action="{{ routes.cart_url }}"
      novalidate
      method="post">
      <!-- Order Note -->

      {% if ss.order_note %}
        <div
          :class="['order-note-background-{{ si }}', { 'show-note-{{ si }}': noteOpen }]"
          @click="this.noteOpen = !this.noteOpen"
          role="button"
          tabindex="0"
          aria-label="Close order note"></div>
        <div
          :class="['order-note-{{ si }}', { 'show-note-{{ si }}': noteOpen }]"
          role="dialog"
          aria-labelledby="order-note-heading-{{ si }}">
          <div class="order-note-padding-{{ si }}">
            <label
              id="order-note-heading-{{ si }}"
              for="cart-note"
              class="order-note-heading-{{ si }}">{{ ss.order_note_heading }}</label>
            <textarea
              class="order-note-textfield-{{ si }}"
              id="cart-note"
              name="note"
              form="cart"
              @change="updateNote"
              aria-labelledby="order-note-heading-{{ si }}">{{ cart.note }}</textarea><br>
            <div
              style="margin-top: auto;"
              class="{{ ss.button_class | replace: ".", " " | replace: "#", " " }}"
              @click="this.noteOpen = !this.noteOpen"
              role="button"
              tabindex="0"
              aria-label="Save order note">
              {{ ss.order_note_confirm }}
            </div>
          </div>
        </div>
      {% endif %}

      <div :class="['cart-content-{{ si }}', { 'fade-in-{{ si }}': cartOpen }]">
        <!-- Header -->

        <div class="cart-header-{{ si }}" v-if="cart.item_count > 0">
          <!-- Start Shipping Bar -->

          {% assign show_progress_bar = false %}
          {% if section.settings.enable_free_shipping or section.settings.enable_free_gift or section.settings.enable_second_free_gift %}
            {% assign show_progress_bar = true %}
          {% endif %}

          {% if show_progress_bar %}
            <div class="shipp_bar_text shipping-bar-container-{{ si }}" v-if="!isB2BCustomer">
              <!-- Text for current threshold status -->
              <div
                class="shipping-bar-text-{{ si }}"
                v-if="currentThresholdText"
                v-html="currentThresholdText"></div>

              <div class="shipping-bar-{{ si }}">
                <div class="progress-bar-{{ si }}">
                  <div class="progress-{{ si }}" :style="progressBarStyle()"></div>
                </div>
                <!-- Shipping bubble -->
                <div v-if="availableThresholds.find(t => t.type === 'shipping')" 
                     :class="['circle-bubble-{{ si }}', { 
                       'reached': cart.total_price >= availableThresholds.find(t => t.type === 'shipping').value, 
                       'next-threshold': nextThresholdToPulse === 'shipping' 
                     }]" 
                     :style="shippingBubbleStyle()">
                  <div class="pulse-dot-{{ si }}"></div>
                </div>
                <!-- Gift bubble -->
                <div v-if="availableThresholds.find(t => t.type === 'gift')" 
                     :class="['circle-bubble-{{ si }}', { 
                       'reached': cart.total_price >= availableThresholds.find(t => t.type === 'gift').value, 
                       'next-threshold': nextThresholdToPulse === 'gift' 
                     }]" 
                     :style="giftBubbleStyle()">
                  <div class="pulse-dot-{{ si }}"></div>
                </div>
                <!-- Second gift bubble -->
                <div v-if="availableThresholds.find(t => t.type === 'second_gift')" 
                     :class="['circle-bubble-{{ si }}', { 
                       'reached': cart.total_price >= availableThresholds.find(t => t.type === 'second_gift').value, 
                       'next-threshold': nextThresholdToPulse === 'second_gift' 
                     }]" 
                     :style="secondGiftBubbleStyle()">
                  <div class="pulse-dot-{{ si }}"></div>
                </div>
              </div>
            </div>
          {% endif %}

          <!-- Show cart heading when no progress bar is shown -->
          {% unless show_progress_bar %}
            <div class="cart-heading-{{ si }}" v-if="!isB2BCustomer">
              {{ ss.cart_heading | default: 'Warenkorb' }}
            </div>
          {% endunless %}
          <!-- End Shipping Bar -->

          <!-- Start Close Button -->
          <svg
            @click="openCart"
            role="presentation"
            stroke-width="2"
            focusable="false"
            width="24"
            height="24"
            class="close-{{ si }}"
            viewBox="0 0 24 24">
            <path d="M17.658 6.343 6.344 17.657M17.658 17.657 6.344 6.343" stroke="{% if ss.font_header_footer contains '#' %}{{ ss.font_header_footer }}{% else %}#000000{% endif %}"></path>
          </svg>
        <!-- End Close Button -->
        </div>
        <!-- Dieser Block wird nur angezeigt, wenn der Warenkorb mindestens ein Produkt enthält -->
        {% comment %}
          <div class="sh-cart-tolle-wahl-modul" v-if="cart.item_count > 0">
          <!-- Icon -->
          <svg width="24" height="24" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
          <rect x="0.5" y="0.5" width="13" height="13" rx="6.5" fill="#2E7E0C"/>
          <path d="M4.5 7.5L6.5 9.5L9.5 5" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
          <!-- Hier kannst du deinen Text ändern -->
          <p><b>Gute Wahl!</b> Diese Artikel hast du ausgewählt:</p>
          </div>
        {% endcomment %}

        <div class="cart-body-{{ si }}" v-if="cart.item_count > 0">

        <!-- Warning Message -->
        <div class="cart__warning-message">
          <svg
            viewBox="0 0 24 24"
            width="1em"
            height="1em"
            fill="#666"
            class="warning-icon"
            focusable="false"
            aria-hidden="true">
            <path d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12c6.624-.008 11.992-5.376 12-12 0-6.627-5.373-12-12-12m0 22.5C6.201 22.5 1.5 17.799 1.5 12S6.201 1.5 12 1.5c5.796.007 10.493 4.704 10.5 10.5 0 5.799-4.701 10.5-10.5 10.5"></path>
            <circle
              cx="12"
              cy="5.6"
              r="1.1"></circle>
            <path d="M12 8.25a.75.75 0 0 0-.75.75v9.75a.75.75 0 1 0 1.5 0V9a.75.75 0 0 0-.75-.75"></path>
          </svg>
          <span class="warning-text">Artikel im Warenkorb werden nicht reserviert.</span>
        </div>

          <!-- Cart Items -->

          <transition-group name="products">
            <div
              :class="{ 'has-hidden-prop': item.hasHiddenProperties }"
              class="item-container-{{ si }}"
              v-for="item in filteredCartItems.filter(item => item.quantity > 0)"
              :key="item.variant_id">
              <div class="image-container-{{ si }}">
                <img
                  class="image-{{ si }}"
                  :src="item.featured_image.url + '&width=200'"
                  :alt="item.title">
              </div>
              <div class="info-{{ si }}">
                <template v-if="item.isGiftProduct">
                  <div class="title-{{ si }}" v-html="item.title"></div>
                  <div class="properties-{{ section.id }}" v-for="(value, key) in item.properties">
                    <span v-if="value" v-html="key + ' ' + value"></span>
                  </div>
                  <div class="price-{{ si }}">
                    <span v-html="this.formatMoney(item.line_price)"></span>
                  </div>
                </template>
                <template v-else>
                  <a :href="item.url">
                    <div class="title-{{ si }}" v-html="item.title"></div>
                    <div class="properties-{{ section.id }}" v-for="(value, key) in item.properties">
                      <span v-if="value" v-html="key + ' ' + value"></span>
                    </div>
                    <div class="price-{{ si }}">
                      <span
                        class="crossed-price-{{ si }}"
                        v-if="item.hasDiscount"
                        v-html="item.formattedOriginalLinePrice"></span>
                      <span v-html="item.formattedLinePrice"></span>
                      <!-- Show discount if applied -->
                      <small  
                        class="cart__discount-{{ si }}"
                        v-if="appliedDiscountCode">
                        <svg 
                          fill="#000" 
                          width="14px" 
                          height="14px" 
                          viewBox="0 0 16 16" 
                          xmlns="http://www.w3.org/2000/svg" 
                          stroke="#3d0734" 
                          stroke-width="0.00016">
                          <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                          <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
                          <g id="SVGRepo_iconCarrier">
                            <path d="M10.09 4.37a.62.62 0 0 0-.85.23l-3.57 6.18a.62.62 0 0 0 .23.85.55.55 0 0 0 .31.08.63.63 0 0 0 .54-.31l3.57-6.18a.61.61 0 0 0-.23-.85zM7.35 6.43a2.16 2.16 0 0 0-2.06-2.24 2.17 2.17 0 0 0-2.07 2.24 2.17 2.17 0 0 0 2.07 2.25 2.16 2.16 0 0 0 2.06-2.25zm-2.06 1a.93.93 0 0 1-.82-1 .92.92 0 0 1 .82-1 .91.91 0 0 1 .81 1 .92.92 0 0 1-.81 1zm5.42-.11a2.16 2.16 0 0 0-2.06 2.24 2.16 2.16 0 0 0 2.06 2.25 2.17 2.17 0 0 0 2.07-2.25 2.17 2.17 0 0 0-2.07-2.24zm0 3.24a.92.92 0 0 1-.81-1 .92.92 0 0 1 .81-1 .92.92 0 0 1 .82 1 .93.93 0 0 1-.82 1z"></path>
                            <path d="M8 .5A7.76 7.76 0 0 0 0 8a7.76 7.76 0 0 0 8 7.5A7.76 7.76 0 0 0 16 8 7.76 7.76 0 0 0 8 .5zm0 13.75A6.52 6.52 0 0 1 1.25 8 6.52 6.52 0 0 1 8 1.75 6.52 6.52 0 0 1 14.75 8 6.52 6.52 0 0 1 8 14.25z"></path>
                          </g>
                        </svg>
                        <span 
                          class="discount-name-{{ si }}"
                          v-html="appliedDiscountCode">
                        </span>
                      </small>
                    </div>
                  </a>
                </template>
              </div>
              <div class="quantity-remove-{{ si }}">
                <div v-if="!item.isGiftProduct" class="quantity-box-{{ si }}">
                  <div
                    class="quantity-box-button-{{ si }}"
                    name="minus"
                    @click="(event) => changeQuantity(item.variant_id, event)"
                    role="button"
                    tabindex="0"
                    aria-label="Decrease quantity">-</div>
                  <label for="quantity-input-{{ si }}-{{ item.variant_id }}" class="visually-hidden">Quantity for {{ item.title }}</label>
                  <input
                    :id="'quantity-input-' + si + '-' + item.variant_id"
                    class="quantity-{{ si }}"
                    type="number"
                    step="1"
                    min="0"
                    :value="item.quantity"
                    @change="(event) => changeQuantity(item.variant_id, event)"
                    :aria-label="'Quantity for ' + item.title">
                  <div
                    class="quantity-box-button-{{ si }}"
                    name="plus"
                    @click="(event) => changeQuantity(item.variant_id, event)"
                    role="button"
                    tabindex="0"
                    aria-label="Increase quantity">+</div>
                </div>
                <div
                  class="remove-{{ si }}"
                  @click="(event) => {
                    updateItem(item.variant_id, 0);
                  }"
                  :id="item.variant_id">
                  {{ ss.remove_text }}
                </div>
              </div>
            </div>
          </transition-group>

          <!-- Recommended Products -->

          <div class="recommendations-{{ si }}" v-if="cart.item_count > 0 && recProductCount > 0">
            <div class="arrow-{{ si }}" @click="(e) => calculateSlider(e)">
              <svg
                name="left"
                height="30"
                width="30"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24">
                <g style="pointer-events: none;" data-name="Circle kiri"><circle
                    cx="12"
                    cy="12"
                    r="10"
                    style="fill:{{ ss.background_slider_card_arrows | default: '#f7f7f7' }}" /><path d="M13 16a1 1 0 0 1-.707-.293l-3-3a1 1 0 0 1 0-1.414l3-3a1 1 0 0 1 1.414 1.414L11.414 12l2.293 2.293A1 1 0 0 1 13 16z" style="fill:{{ ss.font_slider_card_arrows | default: '#000000' }}; pointer-events: none;" /></g>
              </svg>
            </div>
            <div class="arrow-{{ si }}" @click="(e) => calculateSlider(e)">
              <svg
                name="right"
                height="30"
                width="30"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24">
                <g style="pointer-events: none;" data-name="Circle kanan"><circle
                    cx="12"
                    cy="12"
                    r="10"
                    style="fill:{{ ss.background_slider_card_arrows | default: '#f7f7f7' }}" /><path d="M11 16a1 1 0 0 1-.707-1.707L12.586 12l-2.293-2.293a1 1 0 0 1 1.414-1.414l3 3a1 1 0 0 1 0 1.414l-3 3A1 1 0 0 1 11 16z" style="fill:{{ ss.font_slider_card_arrows | default: '#000000' }}; pointer-events: none;" /></g>
              </svg>
            </div>
            <div class="recommendations-heading-{{ si }}">{{ ss.recommendations_title }}</div>
            <div class="slider-{{ si }}">
              <div class="product-card-{{ si }}" v-for="(product, index) in rec.products">
                <div
                  class="circle-button-{{ si }}"
                  :id="product.variants[0].id"
                  @click="addToCart($event.target.id)">
                  <svg
                    style="pointer-events: none;"
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24">
                    <title>add_fill</title>
                    <g
                      id="add_fill"
                      fill='none'
                      fill-rule='nonzero'><path d='M24 0v24H0V0h24ZM12.593 23.258l-.011.002-.071.035-.02.004-.014-.004-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01-.017.428.005.02.01.013.104.074.015.004.012-.004.104-.074.012-.016.004-.017-.017-.427c-.002-.01-.009-.017-.017-.018Zm.265-.113-.013.002-.185.093-.01.01-.003.011.018.43.005.012.008.007.201.093c.012.004.023 0 .029-.008l.004-.014-.034-.614c-.003-.012-.01-.02-.02-.022Zm-.715.002a.023.023 0 0 0-.027.006l-.006.014-.034.614c0 .012.007.02.017.024l.015-.002.201-.093.01-.008.004-.011.017-.43-.003-.012-.01-.01-.184-.092Z' /><path fill='{{ ss.font_slider_button | default: '#ffffff' }}' d='M10.5 20a1.5 1.5 0 0 0 3 0v-6.5H20a1.5 1.5 0 0 0 0-3h-6.5V4a1.5 1.5 0 0 0-3 0v6.5H4a1.5 1.5 0 0 0 0 3h6.5V20Z' /></g>
                  </svg>
                </div>
                <div class="product-info-{{ si }}">
                  <img
                    loading="lazy"
                    class="product-image-{{ si }}"
                    :src="product.variants[0].featured_image ? (product.variants[0].featured_image.src + '&width=200') : product.featured_image + '&width=200'"
                    :alt="product.title">
                  <div class="price-{{ si }}">
                    <div class="product-title-{{ si }}" v-html="product.title"></div>
                    <s
                      v-if="product.variants[0].compare_at_price && product.variants[0].compare_at_price > product.variants[0].price"
                      style="opacity: 0.75; margin-right: 4px;"
                      class="compare-price-{{ si }}"
                      v-html="formatMoney(product.variants[0].compare_at_price)"></s>
                    <span
                      class="final-price-{{ si }}"
                      v-html="formatMoney(product.variants[0].price)"
                      :style="{ color: product.variants[0].compare_at_price && product.variants[0].compare_at_price > product.variants[0].price ? '{{ ss.font_compare_at_price }}' : '{{ ss.font_product_card }}' }"></span>
                    <div class="varianten-{{ si }}" v-if="product.variants.length > 1">
                      <svg
                        class="chevrone-{{ si }}"
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        viewBox="0 0 24 24">
                        <title>down_line</title>
                        <g
                          id="down_line"
                          fill='none'
                          fill-rule='evenodd'><path d='M24 0v24H0V0h24ZM12.593 23.258l-.011.002-.071.035-.02.004-.014-.004-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01-.017.428.005.02.01.013.104.074.015.004.012-.004.104-.074.012-.016.004-.017-.017-.427c-.002-.01-.009-.017-.017-.018Zm.265-.113-.013.002-.185.093-.01.01-.003.011.018.43.005.012.008.007.201.093c.012.004.023 0 .029-.008l.004-.014-.034-.614c-.003-.012-.01-.02-.02-.022Zm-.715.002a.023.023 0 0 0-.027.006l-.006.014-.034.614c0 .012.007.02.017.024l.015-.002.201-.093.01-.008.004-.011.017-.43-.003-.012-.01-.01-.184-.092Z' /><path fill='{% if ss.font_inputs contains '#' %}{{ ss.font_inputs }}{% else %}#000000{% endif %}' d='M12.707 15.707a1 1 0 0 1-1.414 0L5.636 10.05A1 1 0 1 1 7.05 8.636l4.95 4.95 4.95-4.95a1 1 0 0 1 1.414 1.414l-5.657 5.657Z' /></g>
                      </svg>
                      <select
                        class="variante-{{ si }}"
                        @change="selectedVariant(index)"
                        :aria-label="'Select variant for ' + product.title">
                        <option selected hidden>Auswählen</option>
                        <option
                          :id="variant.id"
                          v-for="variant in product.variants.filter(variant => variant.available)"
                          :value="variant.id"
                          v-html="variant.title"></option>
                      </select>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

        </div>

        <!-- Express Shipping -->

        {% if ss.express_shipping != blank %}
          <div class="express-shipping-{{ si }}" v-if="!expressShipping && cart.item_count > 0">
            <div v-html="'<style>.cart-footer-{{ si }} { box-shadow: none; border-radius: 0px !important; }</style>'"></div>
            <img
              loading="lazy"
              class="shipping-image-{{ si }}"
              src="{{ ss.express_shipping.featured_image | image_url: width: 50 }}"
              alt="{{ ss.express_shipping.title }}">
            <div>{{ ss.express_shipping.title }}</div>
            <div
              class="{{ ss.button_class | replace: ".", " " | replace: "#", " " }} shipping-button-{{ si }}"
              v-html="'+ ' + formatMoney({{ ss.express_shipping.price }})"
              id="{{ ss.express_shipping.first_available_variant.id }}"
              @click="addToCart($event.target.id)"></div>
          </div>
        {% endif %}

        <!-- Footer -->

        <div class="cart-footer-{{ section.id }}" v-if="cart.item_count > 0">

        <!-- Discount Code -->
        <div class="cart__item-row cart__item--discount-{{ si }}" v-show="!appliedDiscountCode">
          <div class="discount-code-container-{{ si }}">
            <!-- Input field and button - hidden when discount is applied -->
            <div class="cart-discount-{{ si }} input-wrapper" v-if="!appliedDiscountCode">
              <label for="discount_code" class="visually-hidden sr-only">Rabattcode eingeben</label>
              <input
                type="text"
                id="discount_code"
                name="discount"
                class="form-control discount-input-{{ si }}"
                value=""
                placeholder="Rabattcode eingeben"
                form="cart"
                v-model="discountCode"
                :disabled="discountLoading"
                @keyup.enter="applyDiscountCode"
              >
              <div class="apply-btn-wrapper-{{ si }}">
                <button 
                  type="button" 
                  class="apply-discount-code-{{ si }}"
                  @click="applyDiscountCode"
                  :disabled="discountLoading || !discountCode.trim()"
                  :class="{ 'loading': discountLoading }"
                >
                  <span v-if="!discountLoading">Anwenden</span>
                  <span v-else>Wird angewendet...</span>
                </button>
              </div>
            </div>
            
            <!-- Success message - shown when discount is applied -->
            <div v-if="appliedDiscountCode" class="discount-success-{{ si }}">
              <div class="applied-discount-header">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M9 12L11 14L15 10" stroke="#28a745" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="#28a745" stroke-width="2"/>
                </svg>
                <span>Rabattcode angewendet: <strong v-html="appliedDiscountCode"></strong></span>
                <button 
                  type="button" 
                  class="remove-discount-btn-{{ si }}"
                  @click="removeDiscountCode"
                  :disabled="discountLoading"
                  title="Rabattcode entfernen">
                  <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                </button>
              </div>
            </div>
            
            <!-- Error message - shown for invalid codes -->
            <div v-if="discountMessage && !appliedDiscountCode" class="discount-message-{{ si }}" :class="{ 'success': discountSuccess, 'error': !discountSuccess }">
              <span v-html="discountMessage"></span>
            </div>
          </div>
        </div>

          <!-- Subtotal -->
          <div class="cart__item-sub cart__item-row cart__item--subtotal">
            <div>{{ ss.subtotal }}</div>
            <div data-subtotal v-html="this.formatMoney(cart.total_price)"></div>
          </div>

          <!-- Bulk Shipment Note -->
          <div v-if="showBulkShipmentNote" class="cart__bulk-shipment-note">
            <div class="bulk-shipment-note-content">
              Hinweis: Der Warenkorb enthält Speditionsartikel. Die Versandkosten werden im Checkout berechnet.
            </div>
          </div>

          <!-- Shipping -->
          <div class="cart__item-row cart__item--shipping" v-if="!showBulkShipmentNote">
            <div>
              <div class="shipping-selector">
                <div class="shipping-label">Versandkosten</div>
                <div class="shipping-dropdown">
                  <button
                    type="button"
                    class="shipping-dropdown-toggle"
                    @click="toggleShippingDropdown">
                    <span class="selected-country selected-country--name" v-text="selectedShippingCountry.name"></span>
                    <span class="selected-country selected-country--code" v-text="selectedShippingCountry.code"></span>
                    <span class="country-restrictions" v-text="selectedShippingCountry.restrictions"></span>
                    <svg
                      class="shipping-chevron"
                      width="12"
                      height="12"
                      viewBox="0 0 12 12"
                      fill="currentColor"
                      :class="{ 'rotated': shippingDropdownOpen }">
                      <path
                        d="M3 4.5L6 7.5L9 4.5"
                        stroke="currentColor"
                        stroke-width="1.5"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        fill="none" />
                    </svg>
                  </button>
                  <div class="shipping-dropdown-menu" v-show="shippingDropdownOpen">
                    <div
                      v-for="country in shippingCountries"
                      :key="country.code"
                      class="shipping-option"
                      :class="{ 'selected': selectedShippingCountry.code === country.code }"
                      @click="selectShippingCountry(country)">
                      <div class="country-info">
                        <span class="country-name country-name--name" v-text="country.name"></span>
                        <span class="country-name country-name--code" v-text="country.code"></span>
                        <span class="country-restrictions" v-text="country.restrictions"></span>
                      </div>
                      <span class="country-price" v-if="isFreeShippingForCountry(country)">Kostenlos</span>
                      <span
                        class="country-price"
                        v-else
                        v-html="formatMoney(country.price * 100)"></span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="cart__shipping-cost">
              <span v-if="isFreeShippingForCountry(selectedShippingCountry)" class="free-shipping">Kostenlos</span>
              <span v-else v-html="formatMoney(selectedShippingCountry.price * 100)"></span>
            </div>
          </div>

          <!-- Total -->
          <div class="cart__item-row cart__item--total">
            <div>Gesamtbetrag</div>
            <div class="cart__total-cost">
              <span v-html="formatMoney(cart.total_price + (isFreeShippingForCountry(selectedShippingCountry) ? 0 : selectedShippingCountry.price * 100))"></span>
            </div>
          </div>

          <!-- Checkout Button -->
          <div class="cart__checkout-wrapper">
            <button
              type="submit"
              name="checkout"
              class="{{ ss.button_class | replace: ".", " " | replace: "#", " " }} checkout-button-{{ si }} btn btn--primary button--product button--loader">
              Zur Kasse
            </button>

            <!-- Order Note Button -->
            {% if ss.order_note %}
              <div class="order-note-footer-{{ si }}" @click="this.noteOpen = !noteOpen">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  style="text-decoration: none;"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24">
                  <title>pencil_3_line</title>
                  <g
                    id="pencil_3_line"
                    fill='none'
                    fill-rule='evenodd'><path d='M24,0 L24,24 L0,24 L0,0 L24,0 Z M12.5935,23.2578 L12.5819,23.2595 L12.5109,23.295 L12.4919,23.2987 L12.4767,23.295 L12.4057,23.2595 C12.3958,23.2564 12.387,23.259 12.3821,23.2649 L12.378,23.2758 L12.3609,23.7031 L12.3659,23.7235 L12.3769,23.7357 L12.4805,23.8097 L12.4953,23.8136 L12.5071,23.8097 L12.6107,23.7357 L12.6233,23.7197 L12.6267,23.7031 L12.6096,23.2758 C12.6076,23.2657 12.601,23.2593 12.5935,23.2578 Z M12.8584,23.1453 L12.8445,23.1473 L12.6598,23.2397 L12.6499,23.2499 L12.6472,23.2611 L12.6651,23.6906 L12.6699,23.7034 L12.6784,23.7105 L12.8793,23.8032 C12.8914,23.8069 12.9022,23.803 12.9078,23.7952 L12.9118,23.7812 L12.8777,23.1665 C12.8753,23.1546 12.8674,23.147 12.8584,23.1453 Z M12.143,23.1473 C12.1332,23.1424 12.1222,23.1453 12.1156,23.1526 L12.1099,23.1665 L12.0758,23.7812 C12.0751,23.7927 12.0828,23.8019 12.0926,23.8046 L12.1083,23.8032 L12.3092,23.7105 L12.3186,23.7024 L12.3225,23.6906 L12.3404,23.2611 L12.3372,23.2485 L12.3278,23.2397 L12.143,23.1473 Z' /><path fill='{{ ss.font_order_note_button }}' d='M18.2932,17.293 C18.6837,16.9025 19.3169,16.9025 19.7074,17.293 C20.0679538,17.6534615 20.0956888,18.2207207 19.7906047,18.6129973 L19.7074,18.7072 L18.2074,20.2072 C16.9885,21.4262 15.0122,21.4261 13.7932,20.2072 C13.3865786,19.8005786 12.7453403,19.7715342 12.3052022,20.1200668 L12.2074,20.2072 L11.7074,20.7072 C11.3169,21.0977 10.6837,21.0977 10.2932,20.7072 C9.93273846,20.3467385 9.90501065,19.7794793 10.2100166,19.3872027 L10.2932,19.293 L10.7932,18.793 C12.0122,17.574 13.9885,17.574 15.2074,18.793 C15.6140214,19.1996214 16.2552597,19.2286658 16.6953978,18.8801332 L16.7932,18.793 L18.2932,17.293 Z M16.4826,3.98345 C17.4589,3.00714 19.0418,3.00714 20.0181,3.98345 C20.9519522,4.91731174 20.9925544,6.40618149 20.1399068,7.3883048 L20.0181,7.51899 L8.44269,19.0944 C8.298154,19.23896 8.1259956,19.352032 7.93708456,19.4272672 L7.79243,19.4765 L4.9548,20.2837 C4.23641905,20.488081 3.57010159,19.8657952 3.69355629,19.1543874 L3.71809,19.0471 L4.52503,16.2093 C4.580942,16.01258 4.6763164,15.830004 4.80474808,15.672324 L4.90717,15.5589 L16.4826,3.98345 Z M18.6039,5.39767 C18.4303,5.22409667 18.160937,5.20481074 17.9660564,5.33981222 L17.8968,5.39767 L6.41324,16.8812 L6.13225,17.8694 L7.12031,17.5884 L18.6039,6.10477 C18.7992,5.90951 18.7992,5.59293 18.6039,5.39767 Z' /></g>
                </svg>
                {{ ss.order_note_footer_text }}
              </div>
            {% endif %}
          </div>

          <!-- Payment Icons -->
          {% if ss.show_payment_icons %}
          <div class="payment-icons__icon" style="display: flex; justify-content: space-around; margin: 15px 0px;">
            <img
              data-swift-lazy="1"
              loading="lazy"
              src="//cdn.shopify.com/shopifycloud/shopify/assets/payment_icons/american_express-2264c9b8b57b23b0b0831827e90cd7bcda2836adc42a912ebedf545dead35b20.svg"
              alt="American Express">
            <img
              data-swift-lazy="1"
              loading="lazy"
              src="//cdn.shopify.com/shopifycloud/shopify/assets/payment_icons/apple_pay-f6db0077dc7c325b436ecbdcf254239100b35b70b1663bc7523d7c424901fa09.svg"
              alt="Apple Pay">
            <img
              data-swift-lazy="1"
              loading="lazy"
              src="//cdn.shopify.com/shopifycloud/shopify/assets/payment_icons/google_pay-c66a29c63facf2053bf69352982c958e9675cabea4f2f7ccec08d169d1856b31.svg"
              alt="Google Pay">
            <img
              data-swift-lazy="1"
              loading="lazy"
              src="//cdn.shopify.com/shopifycloud/shopify/assets/payment_icons/klarna-389801c6056cb5600b4f05f72ebc2c58e4947688c6c4f5e6ccea41f7973d3a28.svg"
              alt="Klarna">
            <img
              data-swift-lazy="1"
              loading="lazy"
              src="//cdn.shopify.com/shopifycloud/shopify/assets/payment_icons/maestro-d2055c6b416c46cf134f393e1df6e0ba31722b623870f954afd392092207889c.svg"
              alt="Maestro">
            <img
              data-swift-lazy="1"
              loading="lazy"
              src="//cdn.shopify.com/shopifycloud/shopify/assets/payment_icons/master-173035bc8124581983d4efa50cf8626e8553c2b311353fbf67485f9c1a2b88d1.svg"
              alt="Mastercard">
            <img
              data-swift-lazy="1"
              loading="lazy"
              src="//cdn.shopify.com/shopifycloud/shopify/assets/payment_icons/paypal-49e4c1e03244b6d2de0d270ca0d22dd15da6e92cc7266e93eb43762df5aa355d.svg"
              alt="PayPal">
            <img
              data-swift-lazy="1"
              loading="lazy"
              src="//cdn.shopify.com/shopifycloud/shopify/assets/payment_icons/sofort-1878a1e07e646284b3d37f2f7026f3b1e21c359a4f0a6af5a2186748fe8d2f0d.svg"
              alt="Sofort">
          </div>
          {% endif %}
        </div>

        <!-- Empty Cart -->

        <div class="cart-empty-{{ si }}" v-if="cart.item_count === 0">
          <div class="empty-cart-content-{{ si }}">
            <div class="empty-cart-icon-{{ si }}">
              <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M9 22C9.55228 22 10 21.5523 10 21C10 20.4477 9.55228 20 9 20C8.44772 20 8 20.4477 8 21C8 21.5523 8.44772 22 9 22Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M20 22C20.5523 22 21 21.5523 21 21C21 20.4477 20.5523 20 20 20C19.4477 20 19 20.4477 19 21C19 21.5523 19.4477 22 20 22Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M1 1H5L7.68 14.39C7.77144 14.8504 8.02191 15.264 8.38755 15.5583C8.75318 15.8526 9.2107 16.009 9.68 16H19.4C19.8693 16.009 20.3268 15.8526 20.6925 15.5583C21.0581 15.264 21.3086 14.8504 21.4 14.39L23 6H6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
            <div class="cart-heading-{{ si }} no-shadow-{{ si }}">{{ ss.empty_cart }}</div>
            <p class="empty-cart-subtitle-{{ si }}">Entdecke unsere Produkte und fülle deinen Warenkorb</p>
            <a class="{{ ss.button_class | replace: ".", " " | replace: "#", " " }} empty-cart-button-{{ si }} button button--solid button--product button--loader" href="/">
              {{- ss.empty_cart_button -}}
            </a>
          </div>
        </div>
      </div>
    </form>
  </div>
</div>

<script>
  const cartDrawer = {
    name: 'Mr Cart Drawer',
    data() {
      return {
        {%- if section.settings.free_gift_product and section.settings.enable_free_gift -%}
          {%- assign free_gift_product = all_products[section.settings.free_gift_product] -%}
          {%- assign is_free_gift_available = free_gift_product.available -%}
          {%- if free_gift_product != blank -%}
            free_gift: {
              variant_id: {{- free_gift_product.variants[0].id | json -}},
              is_available: {{- is_free_gift_available | json -}},
              threshold: {{- section.settings.free_gift_threshold | default: 7500 | json -}},
              product: {{- free_gift_product | json -}}
            },
          {%- endif -%}
        {%- endif -%}
        {%- if section.settings.second_free_gift_product and section.settings.enable_second_free_gift -%}
          {%- assign second_free_gift_product = all_products[section.settings.second_free_gift_product] -%}
          {%- assign is_second_free_gift_available = second_free_gift_product.available -%}
          {%- if second_free_gift_product != blank -%}
            second_free_gift: {
              variant_id: {{- second_free_gift_product.variants[0].id | json -}},
              is_available: {{- is_second_free_gift_available | json -}},
              threshold: {{- section.settings.second_free_gift_threshold | default: 15000 | json -}},
              product: {{- second_free_gift_product | json -}}
            },
          {%- endif -%}
        {%- endif -%}
        {%- if customer and customer.tags contains section.settings.b2b_customer_tag -%}
          isB2BCustomer: true,
        {%- else -%}
          isB2BCustomer: false,
        {%- endif -%}
        cart: {{ cart | json }},
        cartOpen: false,
        rec: { products: [] },
        firstCartItemId: null,
        {% if ss.order_note %}
        noteOpen: false,
        {% endif %}
        shippingDropdownOpen: false,
        selectedShippingCountry: { code: 'DE', name: 'Deutschland', price: 5 },
        shippingCountries: [],
        // Discount code functionality
        discountCode: '',
        appliedDiscountCode: '',
        discountLoading: false,
        discountMessage: '',
        discountSuccess: false,
        // Bulk shipment functionality
        bulkShipmentMap: {},
        // Track manually removed free gifts to prevent re-adding
        manuallyRemovedGifts: {
          free_gift: false,
          second_free_gift: false
        },
        // Track free gift quantities to prevent exploits
        freeGiftQuantities: {
          free_gift: 0,
          second_free_gift: 0
        },
        // Add threshold settings to Vue data
        // enableFreeShipping: {{ section.settings.enable_free_shipping | default: true | json }},
        // enableFreeGift: {{ section.settings.enable_free_gift | default: true | json }},
        // enableSecondFreeGift: {{ section.settings.enable_second_free_gift | default: false | json }},
      }
    },
    methods: {
        updateCart() {
          const cartDrawer = document.querySelector(".cart-body-{{si}}");
          if(cartDrawer){
            cartDrawer.scrollTop = 0;
          }
          
          // Load bulk shipment map from localStorage
          this.loadBulkShipmentMap();
          
          fetch(window.Shopify.routes.root + 'cart.js')
            .then(response => response.json())
            .then(data => {
              // Ensure we have a fresh cart object
              const freshCart = JSON.parse(JSON.stringify(data));
              
              console.log('Fresh cart data:', freshCart);
              console.log('Cart items:', freshCart.items);
              if (freshCart.items.length > 0) {
                console.log('First item prices:', {
                  original_line_price: freshCart.items[0].original_line_price,
                  line_price: freshCart.items[0].line_price,
                  final_line_price: freshCart.items[0].final_line_price,
                  discounts: freshCart.items[0].discounts,
                  total_discount: freshCart.items[0].total_discount
                });
              }
              
              console.log('Cart discount info:', {
                total_discount: freshCart.total_discount,
                cart_level_discount_applications: freshCart.cart_level_discount_applications,
                discount_codes: freshCart.discount_codes
              });
              
              console.log('Updating cart data in Vue...');
              this.cart = freshCart;
              console.log('Cart updated, items:', this.cart.items);
              if (this.cart.items.length > 0) {
                console.log('First item after update:', {
                  title: this.cart.items[0].title,
                  original_line_price: this.cart.items[0].original_line_price,
                  line_price: this.cart.items[0].line_price,
                  final_line_price: this.cart.items[0].final_line_price,
                  hasDiscount: this.cart.items[0].original_line_price > this.cart.items[0].line_price
                });
              }
              this.cartOpen = true;
              // Force Vue to re-render
              this.$forceUpdate();
              
              // Update header cart total
              this.updateHeaderCartTotal(freshCart);
              
              // Wrap handleCartChange in try-catch to prevent errors from breaking cart updates
              try {
                this.handleCartChange(freshCart);
              } catch (error) {
                console.error('Error in handleCartChange:', error);
                // Fallback: just update the cart directly if handleCartChange fails
                this.cart = JSON.parse(JSON.stringify(freshCart));
              }
              
              // Check for existing discount after cart update
              this.checkExistingDiscount();
            })
            .catch(error => {
              console.error('Error fetching cart:', error);
            });
        },

        handleCartChange(cart) {
          try {
            const { free_gift: freeGift, second_free_gift: secondFreeGift, removeProduct } = this;
        
            // Load bulk shipment map to ensure it's up to date
            this.loadBulkShipmentMap();
        
            // If B2B customer, don't apply free gift logic
            if (this.isB2BCustomer) {
                this.cart = JSON.parse(JSON.stringify(cart));
                return;
            }
        
            // Directly update cart if no free gift logic is needed
            if (!freeGift && !secondFreeGift) {
                // Create a new cart object to ensure Vue detects the change
                this.cart = JSON.parse(JSON.stringify(cart));
                return;
            }
      
            const cartTotalPrice = cart.total_price;
            const freeGiftItems = cart.items.filter(item => item.properties && item.properties["_free_gift"]);
            const secondFreeGiftItems = cart.items.filter(item => item.properties && item.properties["_second_free_gift"]);
            
            // Count free gift quantities
            this.freeGiftQuantities.free_gift = freeGiftItems.reduce((sum, item) => sum + item.quantity, 0);
            this.freeGiftQuantities.second_free_gift = secondFreeGiftItems.reduce((sum, item) => sum + item.quantity, 0);
      
            // Handle first free gift
            if (freeGift) {
                const { threshold, is_available: isAvailable, variant_id } = freeGift;
                
                // Remove free gifts if cart total is below the threshold or if there are too many
                if (cartTotalPrice < threshold || this.freeGiftQuantities.free_gift > 1) {
                    // Remove excess free gifts (keep only 1 if threshold is met)
                    const giftsToRemove = this.freeGiftQuantities.free_gift - (cartTotalPrice >= threshold ? 1 : 0);
                    if (giftsToRemove > 0) {
                        for (let i = 0; i < giftsToRemove; i++) {
                            const freeGiftItem = freeGiftItems[i];
                            if (freeGiftItem) {
                                this.removeProduct(freeGiftItem);
                            }
                        }
                        return;
                    }
                    
                    // Remove all free gifts if threshold not met
                    if (cartTotalPrice < threshold && this.freeGiftQuantities.free_gift > 0) {
                        freeGiftItems.forEach(item => this.removeProduct(item));
                        // Reset the manual removal flag when threshold is no longer met
                        this.manuallyRemovedGifts.free_gift = false;
                        return;
                    }
                }
            
                // Add free gift if it's not in the cart, conditions are met, and it wasn't manually removed
                if (cartTotalPrice >= threshold && this.freeGiftQuantities.free_gift === 0 && isAvailable && !this.manuallyRemovedGifts.free_gift) {
                    const uniqId = Date.now();
                    this.addToCart(variant_id, 1, { "_free_gift": uniqId });
                    return;
                }
            }
            
            // Handle second free gift
            if (secondFreeGift) {
                const { threshold, is_available: isAvailable, variant_id } = secondFreeGift;
                
                // Remove second free gifts if cart total is below the threshold or if there are too many
                if (cartTotalPrice < threshold || this.freeGiftQuantities.second_free_gift > 1) {
                    // Remove excess second free gifts (keep only 1 if threshold is met)
                    const giftsToRemove = this.freeGiftQuantities.second_free_gift - (cartTotalPrice >= threshold ? 1 : 0);
                    if (giftsToRemove > 0) {
                        for (let i = 0; i < giftsToRemove; i++) {
                            const secondFreeGiftItem = secondFreeGiftItems[i];
                            if (secondFreeGiftItem) {
                                this.removeProduct(secondFreeGiftItem);
                            }
                        }
                        return;
                    }
                    
                    // Remove all second free gifts if threshold not met
                    if (cartTotalPrice < threshold && this.freeGiftQuantities.second_free_gift > 0) {
                        secondFreeGiftItems.forEach(item => this.removeProduct(item));
                        // Reset the manual removal flag when threshold is no longer met
                        this.manuallyRemovedGifts.second_free_gift = false;
                        return;
                    }
                }
            
                // Add second free gift if it's not in the cart, conditions are met, and it wasn't manually removed
                if (cartTotalPrice >= threshold && this.freeGiftQuantities.second_free_gift === 0 && isAvailable && !this.manuallyRemovedGifts.second_free_gift) {
                    const uniqId = Date.now();
                    this.addToCart(variant_id, 1, { "_second_free_gift": uniqId });
                    return;
                }
            }
      
            // Update the cart when no action is needed
            this.cart = JSON.parse(JSON.stringify(cart));
          } catch (error) {
            console.error('Error in handleCartChange:', error);
            // Fallback: just update the cart directly if any error occurs
            this.cart = JSON.parse(JSON.stringify(cart));
          }
        },

        getRecProducts() {
            if (this.cart.items[0].variant_id !== this.firstCartItemId) {
                this.firstCartItemId = this.cart.items[0].variant_id;
                fetch(window.Shopify.routes.root + `recommendations/products.json?product_id=${this.cart.items[0].product_id}`)
                    .then(response => response.json())
                    .then(allVariants => {
                        for (let i = 0; i < allVariants.products.length; i++) {
                            allVariants.products[i].variants = allVariants.products[i].variants.filter(variant => variant.available);
                        }
                        this.rec = allVariants;
                        setTimeout(() => {
                            const slider = document.querySelector(".slider-{{ si }}");
                            slider.scrollLeft = 0;
                        }, 500);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            }
        },

        openCart() {
            console.log('openCart called, current cartOpen:', this.cartOpen);
            this.cartOpen = !this.cartOpen;
            console.log('cartOpen after toggle:', this.cartOpen);
        },

        changeQuantity(id, event) {
            const quantityBox = event.target.closest('.quantity-box-{{ si }}');
            const input = quantityBox.querySelector('.quantity-{{ si }}');
            event.target.getAttribute("name") === 'plus' ? input.stepUp() : event.target.getAttribute("name") === 'minus' ? input.stepDown() : null;
            const quantity = input.value;
            this.updateItem(id, input.value)
        },

        async updateItem(id, quantity) {
            // Check if this is removing a free gift
            const cartItem = this.cart.items.find(item => item.variant_id === id);
            if (cartItem && quantity === 0) {
                if (cartItem.properties && cartItem.properties["_free_gift"]) {
                    this.manuallyRemovedGifts.free_gift = true;
                } else if (cartItem.properties && cartItem.properties["_second_free_gift"]) {
                    this.manuallyRemovedGifts.second_free_gift = true;
                }
            }
            
            let updates = {};
            updates[id] = quantity;

            const response = await fetch(window.Shopify.routes.root + 'cart/update.js', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ updates })
            })
            this.updateCart();
        },

        async addToCart(id, quantity = 1, properties = {}) {
          let formData = { 'items': [{ 'id': id, 'quantity': quantity, 'properties': properties }] };
          const response = await fetch(window.Shopify.routes.root + 'cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
          })
          const data = await response.json()
          this.updateCart()
        },

        removeProduct(cartLineItem) {
          const _this = this;
          
          // Check if this is a free gift being manually removed
          if (cartLineItem.properties && cartLineItem.properties["_free_gift"]) {
            this.manuallyRemovedGifts.free_gift = true;
          } else if (cartLineItem.properties && cartLineItem.properties["_second_free_gift"]) {
            this.manuallyRemovedGifts.second_free_gift = true;
          }
          
          let updates = { [cartLineItem.key]: 0 };
          fetch(window.Shopify.routes.root + 'cart/update.js', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ updates })})
          .then(res => res.json())
          .then((cart)=> {
            if(cart.status === 404){
              throw Error(`Error occured while removing product ${cartLineItem.title} - ${cart.message}, ${cart.description}`);
            }
            _this.updateCart();
          })
          .catch((error) => {
            console.error('Error:', error);
          });
        },

        loadBulkShipmentMap() {
          try {
            const existing = localStorage.getItem('bulkShipmentMap');
            this.bulkShipmentMap = existing ? JSON.parse(existing) : {};
          } catch (error) {
            this.bulkShipmentMap = {};
          }
        },



        formatMoney(cents) {
            if (cents === null) return "";
            let euros = (cents / 100).toFixed(2);
            euros = euros.replace('.', ',');
            return `${euros} €`;
        },

        insertAmount(string) {
          const cartTotal = this.cart.total_price;
          const thresholds = this.availableThresholds;
          
          // Find the next unreached threshold
          let nextThreshold = null;
          for (let i = 0; i < thresholds.length; i++) {
            if (cartTotal < thresholds[i].value) {
              nextThreshold = thresholds[i];
              break;
            }
          }
          
          let remainingAmount = 0;
          if (nextThreshold) {
            remainingAmount = nextThreshold.value - cartTotal;
          }
          
          const price = '<b>' + this.formatMoney(remainingAmount) + '</b>';
          string = string.replace("price", price);
          return string;
        },

        calculateSlider(event) {
            const scrollContainer = document.querySelector(".slider-{{ si }}");
            if (event.target.getAttribute("name") === 'right') {
                scrollContainer.scrollLeft += 320;
            } else {
                scrollContainer.scrollLeft -= 320;
            }
        },

        selectedVariant(productIndex) {
            const variantIndex = event.target.options[event.target.selectedIndex].index - 1;
            const variant = this.rec.products[productIndex].variants[variantIndex];
            const product = this.rec.products[productIndex];
            const productCard = event.target.closest('.product-card-{{ si }}');
            productCard.querySelector(".circle-button-{{ si }}").setAttribute("id", variant.id);
            if (variant.featured_image) {
                productCard.querySelector(".product-image-{{ si }}").setAttribute("src", variant.featured_image.src + '&width=80')
            } else {
                productCard.querySelector(".product-image-{{ si }}").setAttribute("src", product.featured_image + '&width=80')
            };
            
            const comparePriceElement = productCard.querySelector(".compare-price-{{ si }}");
            const finalPriceElement = productCard.querySelector(".final-price-{{ si }}");
            
            if (variant.compare_at_price && variant.compare_at_price > variant.price) {
                comparePriceElement.innerHTML = this.formatMoney(variant.compare_at_price);
                comparePriceElement.style.display = 'inline';
                finalPriceElement.style.color = "{{ ss.font_compare_at_price }}";
            } else {
                comparePriceElement.style.display = 'none';
                finalPriceElement.style.color = "{{ ss.font_product_card }}";
            }
            
            finalPriceElement.innerHTML = this.formatMoney(variant.price);
        },

        onLoad() {
            {% if ss.use_recommended == false %}
            const array = {{ ss.recommendations | json }}
            for (let i = 0; i < array.length; i++) {
                array[i].variants = array[i].variants.filter(variant => variant.available)
            }
            this.rec.products = array 
            {% else %}
            if (this.cart.item_count > 0) this.getRecProducts(); 
            {% endif %}

            const vm = this;

            // Listen for cart icon clicks - updated selectors for theme compatibility
            const cartButtons = document.querySelectorAll('[data-js-sidebar-handle][aria-controls="site-cart-sidebar"], .mobile-cart-button, .button[aria-controls="site-cart-sidebar"], .js-drawer-open-cart, [aria-controls="CartDrawer"]');
            console.log('Found cart buttons:', cartButtons.length, cartButtons);
            cartButtons.forEach(button => {
                console.log('Adding click listener to cart button:', button);
                button.addEventListener('click', (event) => {
                    console.log('Cart button clicked!');
                    event.preventDefault();
                    event.stopPropagation();
                    vm.openCart();
                });
            });

            // Handle add to cart buttons specifically
            document.querySelectorAll('{{ ss.add_to_cart_class }}').forEach(button => {
                button.addEventListener('click', async (event) => {
                    // Check if this is part of a form
                    const form = button.closest('form[action="/cart/add"]');
                    if (form) {
                        event.preventDefault();
                        event.stopPropagation();
                        
                        const formData = new FormData(form);
                        const response = await fetch(window.Shopify.routes.root + 'cart/add.js', {
                            method: 'POST',
                            body: formData
                        });
                        
                        if (response.ok) {
                            vm.updateCart();
                            vm.openCart();
                        }
                    } else {
                        // If not part of a form, just open cart
                        event.preventDefault();
                        event.stopPropagation();
                        vm.openCart();
                    }
                });
            });

            // Listen for quick add to cart events
            document.addEventListener('add-to-cart', function() {
                vm.updateCart();
                vm.openCart();
            });

            document.documentElement.addEventListener("cart:change", function() {
                vm.updateCart();
                vm.openCart();
                vm.itemCountBubble && (vm.itemCountBubble());
                // Also update header bubble count immediately
                try {
                  const bubble = document.querySelector('.cart-link__bubble');
                  if (bubble) {
                    const num = bubble.querySelector('.cart-link__bubble-num');
                    if (num) {
                      num.textContent = String(vm.cart.item_count || 0);
                    }
                    if ((vm.cart.item_count || 0) > 0){
                      bubble.classList.add('cart-link__bubble--visible');
                    } else {
                      bubble.classList.remove('cart-link__bubble--visible');
                    }
                  }
                } catch(e){}
            }, true);

            // Listen for localStorage changes to update bulk shipment map
            window.addEventListener('storage', function(e) {
                if (e.key === 'bulkShipmentMap') {
                    vm.loadBulkShipmentMap();
                }
            });

            // Listen for any cart-related events
            document.addEventListener('click', function(event) {
                const target = event.target.closest('[data-js-sidebar-handle][aria-controls="site-cart-sidebar"], .mobile-cart-button, .button[aria-controls="site-cart-sidebar"], .js-drawer-open-cart, [aria-controls="CartDrawer"]');
                if (target && !target.hasAttribute('data-vue-cart-handled')) {
                    event.preventDefault();
                    event.stopPropagation();
                    vm.openCart();
                }
                
                // Handle add to cart buttons specifically
                const addToCartButton = event.target.closest('{{ ss.add_to_cart_class }}');
                if (addToCartButton && !addToCartButton.hasAttribute('data-vue-cart-handled')) {
                    const form = addToCartButton.closest('form[action="/cart/add"]');
                    if (form) {
                        event.preventDefault();
                        event.stopPropagation();
                        
                        // Handle the form submission
                        const formData = new FormData(form);
                        fetch(window.Shopify.routes.root + 'cart/add.js', {
                            method: 'POST',
                            body: formData
                        }).then(response => {
                            if (response.ok) {
                                vm.updateCart();
                                vm.openCart();
                            }
                        });
                    } else {
                        event.preventDefault();
                        event.stopPropagation();
                        vm.openCart();
                    }
                }
            }, true);

            // Override the theme's cart sidebar show method
            if (window.Shopify && window.Shopify.theme) {
                const originalShow = window.Shopify.theme.sidebarShow;
                if (originalShow) {
                    window.Shopify.theme.sidebarShow = function(sidebar) {
                        if (sidebar && (sidebar.id === 'site-cart-sidebar' || sidebar.classList.contains('sidebar--right'))) {
                            vm.openCart();
                            return;
                        }
                        return originalShow.apply(this, arguments);
                    };
                }
            }

            // Override any existing cart sidebar show methods
            const cartSidebar = document.getElementById('site-cart-sidebar');
            if (cartSidebar && cartSidebar.show) {
                const originalShow = cartSidebar.show;
                cartSidebar.show = function() {
                    vm.openCart();
                };
            }

            // Use mutation observer to handle dynamically added cart buttons
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'childList') {
                        mutation.addedNodes.forEach(function(node) {
                            if (node.nodeType === 1) { // Element node
                                const cartButtons = node.querySelectorAll ? node.querySelectorAll('[data-js-sidebar-handle][aria-controls="site-cart-sidebar"], .mobile-cart-button, .button[aria-controls="site-cart-sidebar"], .js-drawer-open-cart, [aria-controls="CartDrawer"]') : [];
                                cartButtons.forEach(button => {
                                    if (!button.hasAttribute('data-vue-cart-handled')) {
                                        button.setAttribute('data-vue-cart-handled', 'true');
                                        button.addEventListener('click', (event) => {
                                            event.preventDefault();
                                            event.stopPropagation();
                                            vm.openCart();
                                        });
                                    }
                                });
                                
                                // Handle dynamically added add to cart buttons
                                const addToCartButtons = node.querySelectorAll ? node.querySelectorAll('{{ ss.add_to_cart_class }}') : [];
                                addToCartButtons.forEach(button => {
                                    if (!button.hasAttribute('data-vue-cart-handled')) {
                                        button.setAttribute('data-vue-cart-handled', 'true');
                                        button.addEventListener('click', async (event) => {
                                            const form = button.closest('form[action="/cart/add"]');
                                            if (form) {
                                                event.preventDefault();
                                                event.stopPropagation();
                                                
                                                const formData = new FormData(form);
                                                const response = await fetch(window.Shopify.routes.root + 'cart/add.js', {
                                                    method: 'POST',
                                                    body: formData
                                                });
                                                
                                                if (response.ok) {
                                                    vm.updateCart();
                                                    vm.openCart();
                                                }
                                            } else {
                                                event.preventDefault();
                                                event.stopPropagation();
                                                vm.openCart();
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            });

            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        },

        {% if ss.order_note %}
        async updateNote() {
            const note = event.target.value;
            const response = await fetch(window.Shopify.routes.root + 'cart/update.js', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ note: note })
            })
        },
        {% endif %}

        {% if ss.cart_count_bubble_class %}
        itemCountBubble() {
          const countBubbleElement = document.querySelector("{{ ss.cart_count_bubble_class }}")


          if (!countBubbleElement) {
            return
          }

          countBubbleElement.innerHTML = this.cart.item_count;
        },
        {% endif %}

        toggleShippingDropdown() {
          this.shippingDropdownOpen = !this.shippingDropdownOpen;
        },

        selectShippingCountry(country) {
          this.selectedShippingCountry = country;
          this.shippingDropdownOpen = false;
        },

        {% if section.settings.enable_free_shipping or section.settings.enable_free_gift or section.settings.enable_second_free_gift %}
        shippingBubbleStyle() {
          const thresholds = this.availableThresholds;
          const shippingThreshold = thresholds.find(t => t.type === 'shipping');
          
          if (!shippingThreshold) return { display: 'none' };
          
          const borderStyle = this.cart.total_price >= shippingThreshold.value
            ? `2px solid #D98B99`
            : '';

          const maxThreshold = Math.max(...thresholds.map(t => t.value));
          const shippingPosition = (shippingThreshold.value / maxThreshold) * 100;

          return {
              border: borderStyle,
              position: 'absolute',
              left: `${shippingPosition}%`,
              transform: 'translateX(-50%)'
          };
        },

        progressBarStyle() {
          const thresholds = this.availableThresholds;
          if (thresholds.length === 0) return { width: '0%' };
          
          const maxThreshold = Math.max(...thresholds.map(t => t.value));
          let width = Math.min(100, (this.cart.total_price / maxThreshold) * 100);
          return {
            width: width + '%',
            transition: 'width 1s ease'
          };
        },

        giftBubbleStyle() {
          const thresholds = this.availableThresholds;
          const giftThreshold = thresholds.find(t => t.type === 'gift');
          
          if (!giftThreshold) return { display: 'none' };
          
          const maxThreshold = Math.max(...thresholds.map(t => t.value));
          const giftPosition = (giftThreshold.value / maxThreshold) * 100;

          return {
            border: this.cart.total_price >= giftThreshold.value ? '2px solid #D98B99' : '2px solid {{ss.background_shipping_bar}}',
            position: 'absolute',
            left: `${giftPosition}%`,
            transform: 'translateX(-50%)'
          };
        },

        secondGiftBubbleStyle() {
          const thresholds = this.availableThresholds;
          const secondGiftThreshold = thresholds.find(t => t.type === 'second_gift');
          
          if (!secondGiftThreshold) return { display: 'none' };
          
          const maxThreshold = Math.max(...thresholds.map(t => t.value));
          const secondGiftPosition = (secondGiftThreshold.value / maxThreshold) * 100;

          return {
            border: this.cart.total_price >= secondGiftThreshold.value ? '2px solid #D98B99' : '2px solid {{ss.background_shipping_bar}}',
            position: 'absolute',
            left: `${secondGiftPosition}%`,
            transform: 'translateX(-50%)'
          };
        },
        {% endif %}

        updateShippingCountries() {
          // Shipping countries are now handled by blocks, no need to update dynamically
        },

        getShippingCountries() {
          {% if section.blocks.size > 0 %}
            const shippingBlocks = [];
            {% for block in section.blocks %}
              {% if block.type == 'shipping_rate' %}
                shippingBlocks.push({
                  code: {{ block.settings.country_code | json }},
                  name: {{ block.settings.country_name | json }},
                  price: {{ block.settings.price | default: 0 | json }},
                  delivery_time: {{ block.settings.delivery_time | json }},
                  restrictions: {{ block.settings.restrictions | json }}
                });
              {% endif %}
            {% endfor %}
            return shippingBlocks.length > 0 ? shippingBlocks : this.getDefaultShippingCountries();
          {% else %}
            return this.getDefaultShippingCountries();
          {% endif %}
        },

        getDefaultShippingCountries() {
          return [
            { code: 'DE', name: 'Deutschland', price: 3.90, delivery_time: '2-3 Werktage', restrictions: '' },
            { code: 'AT', name: 'Österreich', price: 5.90, delivery_time: '2-4 Werktage', restrictions: '' },
            { code: 'LU', name: 'Luxemburg', price: 5.90, delivery_time: '2-4 Werktage', restrictions: '' },
            { code: 'EU', name: 'Europa', price: 6.90, delivery_time: '3-5 Werktage', restrictions: '' }
          ];
        },

        isFreeShippingForCountry(country) {
          // Only DE can become free via threshold setting
          if (country.code === 'DE') {
            return this.cart.total_price >= {{ ss.freeshipping | default: 7500 }};
          }
          // AT, LU, EU are never free in this setup
          return false;
        },

        async applyDiscountCode() {
          // Set loading state
          this.discountLoading = true;
          this.discountMessage = '';
          this.discountSuccess = false;
          
          console.log('Applying discount code:', this.discountCode.trim());
          
          try {
            // Submit the discount code via GET request
            const response = await fetch(window.Shopify.routes.root + 'discount/' + this.discountCode.trim());
            console.log('Discount response status:', response.status);
            
            // Wait 1000ms as specified
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // Fetch fresh cart data
            const cartResponse = await fetch(window.Shopify.routes.root + 'cart.js');
            const cart = await cartResponse.json();
            
            console.log('Fresh cart data after discount application:', cart);
            console.log('Cart items with discounts:', cart.items.map(item => ({
              title: item.title,
              discounts: item.discounts,
              total_discount: item.total_discount,
              line_price: item.line_price,
              original_line_price: item.original_line_price
            })));
            
            // Check if discount was actually applied by looking at line item discounts
            // and also check cart_level_discount_applications as fallback
            const hasAppliedDiscount = this.checkIfDiscountApplied(cart);
            
            console.log('Has applied discount:', hasAppliedDiscount);
            
            if (hasAppliedDiscount) {
              // Get the applied discount code from the first item with a discount
              const appliedDiscount = this.getAppliedDiscountCode(cart);
              console.log('Applied discount code:', appliedDiscount);
              
              // Store the applied discount code
              this.appliedDiscountCode = appliedDiscount;
              // Clear the input field
              this.discountCode = '';
              // Update cart data
              this.cart = cart;
              // Force Vue to re-render
              this.$forceUpdate();
              // Show success message
              this.discountMessage = 'Rabattcode erfolgreich angewendet';
              this.discountSuccess = true;
              // Update discount info in cart items
              this.updateDiscountDisplay();
              // Keep success message permanently when discount is applied
            } else {
              // Keep the input field as is, don't clear it
              // Show error message
              this.discountMessage = 'Dieser Rabattcode ist ungültig oder nicht anwendbar.';
              this.discountSuccess = false;
              // Clear error message after 5 seconds
              setTimeout(() => {
                this.discountMessage = '';
              }, 5000);
            }
          } catch (error) {
            console.error('Error applying discount code:', error);
            this.discountMessage = 'Fehler beim Anwenden des Rabattcodes.';
            this.discountSuccess = false;
          } finally {
            this.discountLoading = false;
          }
        },

        updateDiscountDisplay() {
          // The discount display is now reactive through Vue's v-html directive
          // No need to manually update DOM elements
        },

        checkExistingDiscount() {
          console.log('Checking for existing discount in cart...');
          console.log('Cart data:', this.cart);
          
          if (this.cart && this.checkIfDiscountApplied(this.cart)) {
            const appliedDiscount = this.getAppliedDiscountCode(this.cart);
            console.log('Found existing discount:', appliedDiscount);
            // Set the applied discount code
            this.appliedDiscountCode = appliedDiscount;
            // Update discount display
            this.updateDiscountDisplay();
          } else {
            console.log('No existing discount found');
            // Clear applied discount code if no discount is applied
            this.appliedDiscountCode = '';
          }
        },

        checkIfDiscountApplied(cart) {
          // Check if any item has discounts
          const hasItemDiscounts = cart.items && cart.items.some(item => 
            item.discounts && item.discounts.length > 0
          );
          
          // Check if cart has total discount
          const hasTotalDiscount = cart.total_discount && cart.total_discount > 0;
          
          // Check cart level discount applications as fallback
          const hasCartLevelDiscounts = cart.cart_level_discount_applications && 
            cart.cart_level_discount_applications.length > 0;
          
          // Check discount_codes array - but only if they are actually applicable
          const hasApplicableDiscountCodes = cart.discount_codes && 
            cart.discount_codes.some(discount => discount.applicable === true);
          
          console.log('Discount check results:', {
            hasItemDiscounts,
            hasTotalDiscount,
            hasCartLevelDiscounts,
            hasApplicableDiscountCodes,
            total_discount: cart.total_discount,
            discount_codes: cart.discount_codes,
            cart_level_discount_applications: cart.cart_level_discount_applications
          });
          
          // Log individual item discount info
          if (cart.items && cart.items.length > 0) {
            cart.items.forEach((item, index) => {
              console.log(`Item ${index + 1} (${item.title}):`, {
                discounts: item.discounts,
                total_discount: item.total_discount,
                original_line_price: item.original_line_price,
                line_price: item.line_price,
                hasDiscount: item.original_line_price > item.line_price
              });
            });
          }
          
          return hasItemDiscounts || hasTotalDiscount || hasCartLevelDiscounts || hasApplicableDiscountCodes;
        },

        getAppliedDiscountCode(cart) {
          console.log('Getting applied discount code from cart:', cart);
          
          // First try to get from cart level discount applications
          if (cart.cart_level_discount_applications && cart.cart_level_discount_applications.length > 0) {
            const code = cart.cart_level_discount_applications[0].title;
            console.log('Found discount in cart_level_discount_applications:', code);
            return code;
          }
          
          // Then try to get from the first item with discounts
          if (cart.items && cart.items.length > 0) {
            for (const item of cart.items) {
              if (item.discounts && item.discounts.length > 0) {
                const code = item.discounts[0].title;
                console.log('Found discount in item discounts:', code);
                return code;
              }
            }
          }
          
          // Fallback: check discount_codes array - but only if applicable
          if (cart.discount_codes && cart.discount_codes.length > 0) {
            const applicableDiscount = cart.discount_codes.find(discount => discount.applicable === true);
            if (applicableDiscount) {
              const code = applicableDiscount.code;
              console.log('Found applicable discount in discount_codes:', code);
              return code;
            } else {
              console.log('Found discount codes but none are applicable:', cart.discount_codes);
            }
          }
          
          console.log('No discount code found');
          return '';
        },

        removeDiscountCode() {
          console.log('Removing discount code...');
          this.discountLoading = true;
          
          fetch(window.Shopify.routes.root + 'cart/update.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              discount_code: ''
            })
          })
          .then(response => response.json())
          .then(cart => {
            console.log('Discount removed, updated cart:', cart);
            this.cart = cart;
            this.appliedDiscountCode = '';
            this.discountLoading = false;
            this.$forceUpdate();
          })
          .catch(error => {
            console.error('Error removing discount:', error);
            this.discountLoading = false;
          });
        },

        updateHeaderCartTotal(cart) {
          // Find all header cart total elements
          const headerCartTotalElements = document.querySelectorAll('[data-header-cart-total]');
          
          if (headerCartTotalElements.length > 0) {
            const formattedTotal = this.formatMoney(cart.total_price);
            
            headerCartTotalElements.forEach(element => {
              element.textContent = formattedTotal;
            });
          }

          // Update header cart bubble (count + visibility) immediately
          try {
            const bubbles = document.querySelectorAll('.cart-link__bubble');
            const count = cart.item_count || 0;
            bubbles.forEach(bubble => {
              // Put the number as the bubble text
              bubble.textContent = String(count > 0 ? count : '');
              // Toggle visibility class
              if (count > 0) {
                bubble.classList.add('cart-link__bubble--visible');
                bubble.setAttribute('data-count', String(count));
              } else {
                bubble.classList.remove('cart-link__bubble--visible');
                bubble.removeAttribute('data-count');
              }
            });
          } catch(_) {}
        },


    },

    watch: {
      cart(newVal, oldVal) { 
        {% if ss.cart_count_bubble_class != blank %}
        this.itemCountBubble() 
        {% endif %}
        {% if ss.use_recommended == true %}

        if (newVal.item_count > 0 && oldVal.item_count === 0) this.getRecProducts();
          
        else if (newVal.item_count > 0 && oldVal.item_count !== 0) {
          if (oldVal.items[0].id !== newVal.items[0].id) this.getRecProducts();
        }

        
        {% endif %}
        

      },

      cartOpen() {
          if (this.cartOpen) document.body.style.overflow = "hidden"
          else document.body.style.overflow = "auto"
      }
    },

    created() {
      const vm = this;
      // Initialize shipping countries
      this.shippingCountries = this.getShippingCountries();
      this.selectedShippingCountry = this.shippingCountries.find(country => country.code === 'DE') || this.shippingCountries[0] || { code: 'DE', name: 'Deutschland', price: 5 };
      
      // Initialize bulk shipment map
      this.loadBulkShipmentMap();

      
      document.addEventListener("DOMContentLoaded", function() {
        vm.onLoad()
        
        // Update header cart total on initial load
        vm.updateHeaderCartTotal(vm.cart);
        
        // Additional initialization to prevent old cart interference
        setTimeout(() => {
          // Hide any existing cart overlays
          const overlays = document.querySelectorAll('.site-overlay');
          overlays.forEach(overlay => {
            overlay.style.display = 'none';
            overlay.style.visibility = 'hidden';
          });
          
          // Ensure cart sidebar is hidden
          const cartSidebar = document.getElementById('site-cart-sidebar');
          if (cartSidebar) {
            cartSidebar.style.display = 'none';
            cartSidebar.style.visibility = 'hidden';
            cartSidebar.classList.remove('sidebar--opened');
          }
          
          // Override any existing cart show methods
          if (window.KROWN && window.KROWN.settings) {
            const originalRefreshCart = window.refreshCart;
            if (originalRefreshCart) {
              window.refreshCart = function() {
                vm.updateCart();
                vm.openCart();
              };
            }
          }
        }, 100);
      })
    },

    computed: {
      filteredCartItems() {
        return this.cart.items.map(item => {
          const filteredProperties = {};
          let hasHiddenProperties = false;
          let isGiftProduct = false;
    
          // Iterate over the properties and filter out keys that start with '_'
          for (const key in item.properties) {
            if (key.startsWith('_')) {
              hasHiddenProperties = true; // Set the flag if the property starts with '_'
              if (key === "_free_gift" || key === "_second_free_gift") {
                isGiftProduct = true; // Set the flag for gift products
              }
            } else {
              filteredProperties[key] = item.properties[key];
            }
          }
    
          // Return a new item object with filtered properties and the flag
          return {
            ...item,
            properties: filteredProperties,
            // Add the flag to the item
            hasHiddenProperties, 
            isGiftProduct,
            // Add formatted prices for better reactivity
            formattedLinePrice: this.formatMoney(item.line_price),
            formattedOriginalLinePrice: this.formatMoney(item.original_line_price),
            hasDiscount: item.original_line_price > item.line_price
          };
        });
      },

      // showProgressBar() {
      //   return !this.isB2BCustomer && (this.enableFreeShipping || this.enableFreeGift || this.enableSecondFreeGift);
      // },

      // showCartHeading() {
      //   return this.isB2BCustomer || (!this.enableFreeShipping && !this.enableFreeGift && !this.enableSecondFreeGift);
      // },

      {% if ss.express_shipping != blank %}
      expressShipping() {
        return this.cart.items.some(item => item.product_id === {{ ss.express_shipping.id }});
      },
      {% endif %}

      recProductCount() {
        return this.rec.products.length;
      },

      showBulkShipmentNote() {
        // Check if any cart item has bulk shipment metafield
        const hasBulkShipment = this.cart.items.some(item => {
          const variantId = item.variant_id;
          const variantData = this.bulkShipmentMap[variantId];
          // Check if variant exists in map and has isBulkShipment set to true
          const isBulkShipment = variantData && variantData.isBulkShipment === true;
          
          return isBulkShipment;
        });
        
        return hasBulkShipment;
      },

      // Get all available thresholds and sort them
      availableThresholds() {
        const thresholds = [];
        
        {% if ss.enable_free_shipping %}
          thresholds.push({
            value: {{ ss.freeshipping | default: 7500 }},
            type: 'shipping',
            text: '{{ ss.fs_not_reached | default: 'Du bist nur price vom kostenlosen Versand entfernt!' }}',
            reachedText: '{{ ss.fs_reached | default: 'Deine Bestellung ist Versandkostenfrei' }}'
          });
        {% endif %}
        
        {% if ss.free_gift_product != blank and ss.enable_free_gift %}
          thresholds.push({
            value: {{ ss.free_gift_threshold | default: 10000 }},
            type: 'gift',
            text: '{{ ss.gift_not_reached | default: 'Du bist nur price vom gratis Geschenk entfernt!' }}',
            reachedText: '{{ ss.gift_reached | default: 'Du erhältst ein gratis Geschenk!' }}'
          });
        {% endif %}
        
        {% if ss.second_free_gift_product != blank and ss.enable_second_free_gift %}
          thresholds.push({
            value: {{ ss.second_free_gift_threshold | default: 15000 }},
            type: 'second_gift',
            text: '{{ ss.second_gift_not_reached | default: 'Du bist nur price vom zweiten Geschenk entfernt!' }}',
            reachedText: '{{ ss.second_gift_reached | default: 'Du erhälst ein zweites kostenloses Geschenk' }}'
          });
        {% endif %}
        
        // Sort thresholds by value (lowest first)
        return thresholds.sort((a, b) => a.value - b.value);
      },

      // Threshold computed properties - now based on sorted thresholds
      firstThreshold() {
        const thresholds = this.availableThresholds;
        return thresholds.length > 0 ? thresholds[0].value : 0;
      },

      secondThreshold() {
        const thresholds = this.availableThresholds;
        return thresholds.length > 1 ? thresholds[1].value : 0;
      },

      thirdThreshold() {
        const thresholds = this.availableThresholds;
        return thresholds.length > 2 ? thresholds[2].value : 0;
      },

      // Get threshold type by position
      firstThresholdType() {
        const thresholds = this.availableThresholds;
        return thresholds.length > 0 ? thresholds[0].type : null;
      },

      secondThresholdType() {
        const thresholds = this.availableThresholds;
        return thresholds.length > 1 ? thresholds[1].type : null;
      },

      thirdThresholdType() {
        const thresholds = this.availableThresholds;
        return thresholds.length > 2 ? thresholds[2].type : null;
      },

      // Text computed properties - now based on sorted thresholds
      firstThresholdText() {
        const thresholds = this.availableThresholds;
        return thresholds.length > 0 ? thresholds[0].text : '';
      },

      secondThresholdText() {
        const thresholds = this.availableThresholds;
        return thresholds.length > 1 ? thresholds[1].text : '';
      },

      thirdThresholdText() {
        const thresholds = this.availableThresholds;
        return thresholds.length > 2 ? thresholds[2].text : '';
      },

      firstThresholdReachedText() {
        const thresholds = this.availableThresholds;
        return thresholds.length > 0 ? thresholds[0].reachedText : '';
      },

      secondThresholdReachedText() {
        const thresholds = this.availableThresholds;
        return thresholds.length > 1 ? thresholds[1].reachedText : '';
      },

      thirdThresholdReachedText() {
        const thresholds = this.availableThresholds;
        return thresholds.length > 2 ? thresholds[2].reachedText : '';
      },

      // Check if we have multiple thresholds
      hasMultipleThresholds() {
        return this.availableThresholds.length > 1;
      },

      // Determine which text to show
      currentThresholdText() {
        const cartTotal = this.cart.total_price;
        const thresholds = this.availableThresholds;
        
        if (thresholds.length === 0) {
          return '';
        }
        
        // Find the next unreached threshold
        let nextThreshold = null;
        let reachedThresholds = [];
        
        for (let i = 0; i < thresholds.length; i++) {
          if (cartTotal >= thresholds[i].value) {
            reachedThresholds.push(thresholds[i]);
          } else {
            nextThreshold = thresholds[i];
            break;
          }
        }
        
        // If all thresholds are reached, show the last one's reached text
        if (!nextThreshold && reachedThresholds.length > 0) {
          return reachedThresholds[reachedThresholds.length - 1].reachedText;
        }
        
        // If no thresholds are reached, show the first one's not reached text
        if (reachedThresholds.length === 0 && nextThreshold) {
          return this.insertAmount(nextThreshold.text);
        }
        
        // If some thresholds are reached but not all, show the last reached + next unreached
        if (reachedThresholds.length > 0 && nextThreshold) {
          const lastReached = reachedThresholds[reachedThresholds.length - 1];
          return lastReached.reachedText + ' ' + this.insertAmount(nextThreshold.text);
        }
        
        return '';
      },

      nextThresholdToPulse() {
        const cartTotal = this.cart.total_price;
        const thresholds = this.availableThresholds;
        
        // Find the next threshold that hasn't been reached yet
        for (let i = 0; i < thresholds.length; i++) {
          if (cartTotal < thresholds[i].value) {
            return thresholds[i].type;
          }
        }
        
        // All thresholds reached
        return null;
      },
    },
    
    mounted() {
      console.log("Cart component mounted, checking for existing discount...");
      console.log("Initial cart data:", this.cart);
      if (this.cart && this.cart.items && this.cart.items.length > 0) {
        console.log("First item in mounted:", {
          title: this.cart.items[0].title,
          original_line_price: this.cart.items[0].original_line_price,
          line_price: this.cart.items[0].line_price,
          discounts: this.cart.items[0].discounts,
          total_discount: this.cart.items[0].total_discount
        });
      }
      this.checkExistingDiscount();
    }
    
  }
  
  const cartApp = Vue.createApp(cartDrawer).mount('#cart-{{ si }}');
  
  // Test function to verify bulk shipment functionality
  window.testBulkShipmentNote = function() {
    const analysis = cartApp.cart.items.map(item => {
      const variantId = item.variant_id;
      const variantData = cartApp.bulkShipmentMap[variantId];
      return {
        title: item.title,
        variantId: variantId,
        variantData: variantData,
        isBulkShipment: variantData && variantData.isBulkShipment === true
      };
    });
    
    return {
      cartItems: cartApp.cart.items,
      bulkShipmentMap: cartApp.bulkShipmentMap,
      showNote: cartApp.showBulkShipmentNote,
      analysis: analysis
    };
  };
</script>

<style>
  .compare-price-{{ si }} {
    {% if ss.font_product_card contains '#' %}
      color: {{ ss.font_product_card }};
    {% endif %}
  }

  .compare-price-{{ si }}:empty {
    display: none
  }

  .footer-button-container-{{ si }} {
    display: flex;
    gap: 10px;
    justify-content: space-between;
    align-items: flex-end;
  }

  .order-note-footer-{{ si }} {
    font-size: small;
    text-decoration: underline;
    cursor: pointer;
    line-height: normal;
    text-align: center;
    min-width: 0 !important;
    padding: 5px;
    border-radius: {{ ss.radius_order_note_button }}px;
    border: 2px solid{{ss.font_order_note_button}};
    transition: transform 0.3s ease;
    color: {{ ss.font_order_note_button }};
    background: {{ ss.background_order_note_button }};
  }

  .order-note-footer-{{ si }}:hover {
    transform: scale(1.1);
  }

  .order-note-{{ si }} {
    position: absolute;
    bottom: 0;
    right: 0;
    width: min(100vw, {{ss.drawer_width}}px);
    @media(max-width: 500px) {
      width: min({{ss.drawer_width_mobile}}vw, {{ss.drawer_width}}px);
    }
    height: 0;
    background: {{ ss.background_order_note | default: '#ffffff' }};
    {% if ss.font_order_note contains '#'%}color: {{ss.font_order_note}};{% endif %}
      border-top-right-radius: {{ ss.radius_order_note }}px;
      border-top-left-radius: {{ ss.radius_order_note }}px;
      border-top: 1px solid{{ss.background_order_note | default: '#ffffff' }}80;
      overflow: hidden;
      z-index: 10000;
      transition: height 0.5s ease;
    }


    .order-note-background-{{ si }} {
      background: #00000080;
      position: fixed;
      width: 200vw !important;
      height: 200vw;
      top: 0;
      left: 0;
      z-index: 9999;
      display: block !important;
      pointer-events: none;
      opacity: 0;
      transition: opacity 0.6s ease;
    }

    .order-note-padding-{{ si }} {
      padding: 20px 30px;
      @media(max-width: 500px) {
        padding: 20px;
      }
    }

    .show-note-{{ si }} {
      opacity: 1;
      pointer-events: auto;
      height: 250px;
    }

    .order-note-textfield-{{ si }} {
      width: 100%;
      height: 100px;
      border: 1px solid{% if ss.font_inputs contains '#'%}{{ss.font_inputs}}80;{% endif %}margin-bottom: 5px;
      margin-top: 10px;
      padding: 15px;
      resize: none;
      background: {{ ss.background_inputs }};
      {% if ss.font_order_note contains '#'%}color: {{ss.font_inputs}};{% endif %}
        border-radius: {{ ss.radius_inputs }}px;

      }

      .express-shipping-{{ si }} {
        margin-top: auto;
        display: flex;
        padding: 8px 30px;
        align-items: center;
        width: 100%;
        gap: 10px;
        position: relative;
        z-index: 2;
        box-shadow: 0px 0px 15px 0px{{ss.shadow_header_footer | color_modify: 'alpha', ss.alpha_header_footer }};
        border-top: 1px solid{{ss.shadow_header_footer}};
        {% if ss.font_express_shipping contains '#' %} color: {{ ss.font_express_shipping }};
      {% endif %}
      background: {{ ss.background_express_shipping }};
      border-top-right-radius: {{ ss.radius_header_footer }}px;
      border-top-left-radius: {{ ss.radius_header_footer }}px;
      @media(max-width: 500px) {
        padding: 8px 20px;
      }
    }

    .shipping-image-{{ si }} {
      height: 30px;
    }

    .varianten-{{ si }}
    select.variante-{{ si }} {
      padding: 2px 2px 2px 1rem !important;
    }

    .shipping-button-{{ si }} {
      margin: 0 0 0 auto !important;
      line-height: 1rem !important;
      padding: 8px 12px !important;
      min-width: auto !important;
    }

    .recommendations-{{ si }} {
      position: relative;
      margin-top: 30px;
      width: calc(100% + 60px);
      transform: translateX(-30px);
      background: {{ ss.background_slider }};
      {% if ss.background_slider contains '#' %}
        padding: 10px 0;
      {% endif %}
      @media(max-width: 500px) {
        width: calc(100% + 40px);
        transform: translateX(-20px);
      }
      {% if ss.slider_sticky %}
        position: sticky;
        bottom: -15px;
      {% endif %}
    }

    .recommendations-heading-{{ si }} {
      margin-bottom: 10px;
      padding-left: 30px;
      {% if ss.font_slider_heading contains '#' %} color: {{ ss.font_slider_heading }};
    {% endif %}
    @media(max-width: 500px) {
      padding-left: 20px;
      display: none;
    }
  }

  .slider-{{ si }} {
    overflow: auto;
    display: flex;
    scroll-behavior: smooth;
    scroll-snap-type: x mandatory;
    scrollbar-width: none;
    -ms-overflow-style: none;
    padding-top: 10px;
    padding-left: 30px;
    padding-right: 30px;
    margin-top: -10px;
    @media(max-width: 500px) {
      padding-left: 20px;
      padding-right: 20px;
      padding-top: 12px;
    }
  }

  .slider-{{ si }}::-webkit-scrollbar {
    display: none;
  }

  [name="left"] {
    position: absolute;
    top: {% if ss.background_slider contains '#' %}7px;
  {% else %}-3px;
{% endif %}
right: 65px;
cursor: pointer;
transition: scale 0.3s ease;
@media(max-width: 500px) {
  display: none;
}
{% if ss.shadow_product_card_slider contains '#' %}
  box-shadow: 0px 0px 15px 0px{{ss.shadow_product_card_slider | color_modify: 'alpha', ss.alpha_product_card_slider }};
  border: 1px solid{{ ss.shadow_product_card_slider}};
{% endif %}
background: {{ ss.background_slider_card_arrows | default: '#f7f7f7' }};
border-radius: 100px;
}

[name="right"] {
  position: absolute;
  top: {% if ss.background_slider contains '#' %}7px;
{% else %}-3px;
{% endif %}
right: 30px;
cursor: pointer;
transition: scale 0.2s ease;
@media(max-width: 500px) {
  display: none;
}
{% if ss.shadow_product_card_slider contains '#' %}
  box-shadow: 0px 0px 15px 0px{{ss.shadow_product_card_slider | color_modify: 'alpha', ss.alpha_product_card_slider }};
  border: 1px solid{{ ss.shadow_product_card_slider}};
{% endif %}
background: {{ ss.background_slider_card_arrows | default: '#f7f7f7' }};
border-radius: 100px;
}

@media(min-width: 750px) {
  [name="right"]:hover,
  [name="left"]:hover {
    scale: 1.3;
  }
}


.product-card-{{ si }} {
  position: relative;
  border-radius: {{ ss.radius_slider_product_card }}px;
  padding: 10px;
  background: {{ ss.background_slider_card_arrows }};
  {% if ss.font_slider_card_arrows contains '#' %} color: {{ ss.font_slider_card_arrows }};
{% endif %}
margin-right: 20px;
font-size: small;
scroll-snap-align: center;
min-width: 320px;
height: fit-content;

@media(max-width: 499px) {
  max-width: calc(100vw - 10vw - 40px);
}
{% if ss.shadow_product_card_slider contains '#' %}
  box-shadow: 0px 0px 15px 0px{{ss.shadow_product_card_slider | color_modify: 'alpha', ss.alpha_product_card_slider }};
  border: 1px solid{{ ss.shadow_product_card_slider}};
{% endif %}
}

.product-card-{{ si }}:last-child {
  margin-right: 0;
}


.product-title-{{ si }} {
  font-weight: bold;

  @media(max-width: 500px) {
    font-size: smaller
  }
}

.product-info-{{ si }} {
  display: flex;
  gap: 10px;
}

.product-image-{{ si }} {
  height: 80px;
  object-fit: contain;
  aspect-ratio: 1 / 1;
  border-radius: {{ ss.radius_slider_product_image }}px;
}

.circle-button-{{ si }} {
  position: absolute;
  top: -10px;
  right: -10px;
  width: 30px;
  height: 30px;
  border-radius: 60px;
  font-weight: bold;
  background: {{ ss.background_slider_button | default: '#000000'}};
    display: grid;
    place-items: center;
    cursor: pointer;
  }


  .cart-background-{{si }} {
    background: #00000080;
    position: fixed;
    width: 100vw !important;
    height: 100vh;
    top: 0;
    left: 0;
    z-index: 9999;
    display: block !important;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.6s ease;
  }

  .cart-header-{{ si }} {
    font-size: 14px;
    text-align: center;
    position: relative;
    display: flex;
    align-items: center;
    background: {{ ss.background_header }};
    {% if ss.font_header_footer contains '#' %} color: {{ ss.font_header_footer }};
  {% endif %}
  padding: 15px 30px;
  box-shadow: 0px 0px 15px 0px{{ss.shadow_header_footer | color_modify: 'alpha', ss.alpha_header_footer }};
  border-bottom: 1px solid{{ss.shadow_header_footer}};
  border-bottom-left-radius: {{ ss.radius_header_footer }}px;
  border-bottom-right-radius: {{ ss.radius_header_footer }}px;


  @media(max-width: 500px) {
    padding: 10px 20px;
  }
}

.cart-heading-{{ si }} {
  font-size: 26px;
  font-weight: bold;
}

.cart-heading-{{ si }} {
  font-size: 26px;
  font-weight: bold;
  text-align: center;
  margin: 0;
  flex: 1;
}

.item-count-{{ si }} {
  font-size: small;
  padding: 5px;
  background: {% if ss.font_header_footer %}{{ ss.font_header_footer }}
{% else %}#f7f7f7{% endif %};
  color: {% if ss.font_header_icon %}{{ ss.font_header_icon }}
{% else %}#000000{% endif %};
  border-radius: 50px;
  line-height: 1;
  width: 25px;
  height: 25px;
  display: grid;
  place-items: center;
}

.item-container-{{ si }} {
  display: flex;
  align-items: center;
  gap: 20px;
  margin-bottom: 15px;
  background: {{ ss.background_product_card }};
  {% if ss.font_product_card contains '#' %} color: {{ ss.font_product_card }};
{% endif %}
  border-radius: {{ ss.radius_product_card }}px;
  {% if ss.background_product_card contains '#' %}
    padding: 10px;
  {% endif %}
  {% if ss.shadow_product_card contains '#' %}
    box-shadow: 0px 0px 15px 0px{{ss.shadow_product_card | color_modify: 'alpha', ss.alpha_product_card }};
    border: 1px solid{{ ss.shadow_product_card}};
  {% endif %}
}

.image-container-{{ si }} {
  width: 100px;
  height: 100px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

@media (max-width: 500px) {
  .item-container-{{ si }} {
    gap: 10px;
  }
  .quantity-remove-{{ si }} {
    min-width: 30%;
  }
  .info-{{ si }} {
    min-width: 40%;
  }
  .image-container-{{ si }} {
    width: 75px;
    height: 75px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }
  .title-{{ si }} {
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    text-overflow: ellipsis;
    white-space: normal;
  }
}

/* Special styling for free gift items */
.item-container-{{ si }} .has-hidden-prop {
  background: #F0F3E5;
  border: 2px solid #D98B99;
  padding: 5px 15px;
  border-radius: 8px;
}

.options-{{ si }} {
  font-size: small;
}

.cart-content-{{ si }} {
  height: 100%;
  display: flex;
  flex-direction: column;
  opacity: 0;
  transition: opacity 0.3s ease;
  position: relative;

}


.cart-body-{{ si }} {
  overscroll-behavior-y: contain;
  overflow-y: auto;
  scroll-behavior: smooth;
  padding: 15px 30px;
  height: 100%;
  background: {{ ss.background_main }};
  overflow-x: hidden;

  @media(max-width: 500px) {
    padding: 15px 20px;
  }
}

.cart-body-{{ si }}::-webkit-scrollbar {
  display: none !important;
}

.cart-body-{{ si }} {
  -ms-overflow-style: none !important;
  /* IE and Edge */
  scrollbar-width: none !important;
  /* Firefox */
}

.cart-footer-{{ si }} {
  background: {{ ss.background_footer }};
  {% if ss.font_header_footer contains '#' %} color: {{ ss.font_header_footer }};
{% endif %}
margin-top: auto;
padding: 20px 30px;
border-top-left-radius: {{ ss.radius_header_footer }}px;
border-top-right-radius: {{ ss.radius_header_footer }}px;
box-shadow: 0px 0px 15px 0px{{ss.shadow_header_footer | color_modify: 'alpha', ss.alpha_header_footer }};
border-top: 1px solid{{ss.shadow_header_footer}};
position: relative;
font-size: smaller;

@media(max-width: 500px) {
  padding: 10px 20px;
}
}

/* Warning Message */
.cart__warning-message {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 15px;
    background: #fff8ca;
    border: 1px solid #baa401;
    margin-bottom: 15px;
    font-size: 14px;
    color: #baa401;
}

.warning-icon {
  flex-shrink: 0;
}

.warning-text {
  margin: 0;
}

/* Cart Item Rows */
.cart__item-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0;
  margin-bottom:5px;
}

.cart__item-row:last-child {
  border-bottom: none;
}

.cart__item--subtotal {
  font-weight: 500;
  font-size: 1rem;
}

.cart__item--total {
  font-size: 1rem;
  border-top: 2px solid #efefef;
  margin-top: 5px;
  padding-top: 5px;
}

/* Shipping Selector */
.shipping-selector {
  position: relative;
  display: flex;
  flex-direction: row;
  gap: 4px;
}

.shipping-label {
  font-size: 1rem;
  font-weight: 400;
  color: #000;
  margin-bottom: 0;
}

.shipping-dropdown {
  position: relative;
  display: inline-block;
  min-width: 0;
}

.shipping-dropdown-toggle {
  background: none;
  border: none;
  padding: 0;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 6px;
  font-size: 1rem;
  color: #000;
  font-weight: 400;
  text-decoration: underline;
  text-decoration-color: #ccc;
  text-underline-offset: 2px;
  transition: all 0.2s ease;
  min-width: 0;
}

.shipping-dropdown-toggle:hover {
  text-decoration-color: #000;
}

.selected-country {
  font-weight: 500;
}

/* Default: show full country name, hide code */
.selected-country--name { display: inline; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
.selected-country--code { display: none; }
.country-name--name { display: inline; }
.country-name--code { display: none; }

/* Allow left column of shipping row to shrink */
.cart__item--shipping > div:first-child { min-width: 0; }

@media (max-width: 500px) {
  /* Mobile: show code instead of full name */
  .selected-country--name { display: none; }
  .selected-country--code { display: inline; }
  .country-name--name { display: none; }
  .country-name--code { display: inline; }
  /* Optional: hide restrictions text to save space */
  .country-restrictions { display: none; }
}

.shipping-chevron {
  transition: transform 0.2s ease;
  color: #666;
}

.shipping-chevron.rotated {
  transform: rotate(180deg);
}

.shipping-dropdown-menu {
  position: absolute;
  bottom: 100%;
  left: -100px;
  right: 0;
  background: white;
  border: 1px solid #ddd;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  max-height: 200px;
  overflow-y: auto;
  min-width: 320px;
}

.shipping-option {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 12px;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.shipping-option:hover {
  background-color: #f5f5f5;
}

.shipping-option.selected {
  background-color: #e3f2fd;
}

.country-name {
  font-size: 14px;
}

.country-restrictions {
  font-size: 14px;
  font-style: italic;
  color: #666;
}

.country-price {
  font-size: 14px;
  font-weight: 600;
}

.cart__shipping-cost {
  font-weight: 600;
  font-size: 1rem;
  color: #000;
}

.cart__shipping-cost .free-shipping {
  color: #D98B99;
}

.cart__total-cost {
  font-size: 1rem;
  color: #000;
}

/* Checkout Button */
.cart__checkout-wrapper {
  margin-top: 0;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.checkout-button-{{ si }} {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
}

.image-{{ si }} {
  width: 100%;
  max-width: 100px;
  height: auto;
  aspect-ratio: 1 / 1;
  object-fit: cover;
  filter: drop-shadow(2px 4px 12px rgb(0 0 0 / 8%));
  border-radius: {{ ss.radius_product_image }}px;
}

@media (max-width: 500px) {
  .image-{{ si }} {
    max-width: 75px;
  }
}

.price-{{ si }} {
  display: flex;
  flex-direction: column;
}

.info-{{ si }} {
  margin-right: auto;
}

.title-{{ si }} {
  font-weight: bold;

  @media(max-width: 500px) {
    font-size: smaller;
  }
}


.info-{{ si }}
a {
  text-decoration: none;
  color: inherit;
}

.subtotal-{{ si }}
, .shipping-fee-{{ si }} {
  display: flex;
  justify-content: space-between;
}

.checkout-button-{{ si }} {
  width: 100%;
  margin-top: 10px;
  min-height: 50px;
}

.close-{{ si }} {
  position: absolute;
  right: 30px;
  top: 30px;
  cursor: pointer;
  z-index: 1;
  @media(max-width: 500px) {
    right: 20px;
    top: 20px;
  }
}

.cart-{{ si }} {
  width: 0;
  height: 100%;
  max-height: 100vh;
  background: white;
  position: fixed;
  top: 0;
  right: 0;
  z-index: 10000;
  transition: width 0.3s ease 0.3s;
  overflow: hidden;

}


.cart-empty-{{ si }} {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  gap: 20px;
  width: 100%;
  height: 100%;
  position: relative;
}

.shipping-bar-container-{{ si }} {
  width: 100%;
  background: {{ ss.background_shipping_bar_container }};
  border-radius: {{ ss.radius_shipping_bar_container }}px;
  margin-bottom: 15px;
  padding: 15px 25px 0 15px;
}

.shipping-bar-{{ si }} {
  display: flex;
  align-items: center;
  margin-top: 15px;
  position: relative;
}

.circle-bubble-{{ si }} {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 20px;
  width: 20px;
  border: 2px solid{{ss.background_shipping_bar}};
  border-radius: 50%;
  background: white;
  position: relative;
}

.pulse-dot-{{ si }} {
  width: 8px;
  height: 8px;
  background: #D98B99;
  border-radius: 50%;
}

/* Only pulse the free shipping bubble until it's reached */
.circle-bubble-{{ si }}: not(.reached) .pulse-dot-{{ si }} {
  animation: pulse-{{si}}2s infinite;
}

@keyframes pulse-{{ si }} {
  0% {
    transform: scale(0.95);
    box-shadow: 0 0 0 0 rgba(0, 0, 0, 0.7);
  }
  70% {
    transform: scale(1);
    box-shadow: 0 0 0 10px rgba(0, 0, 0, 0);
  }
  100% {
    transform: scale(0.95);
    box-shadow: 0 0 0 0 rgba(0, 0, 0, 0);
  }
}

.progress-bar-{{ si }} {
  width: 100%;
  height: 10px;
  background: {{ ss.background_shipping_bar }};
  position: relative;
}

.progress-{{ si }} {
  height: 100%;
  background: #D98B99;
  display: block !important;
  transition: width 1s ease;
}

.progress-{{ si }} {
  height: 100%;
  background: #D98B99;
  display: block !important;
  transition: width 1s ease;
}

.shipping-bar-text-{{ si }} {
  {% if ss.font_shipping_bar contains '#' %} color: {{ ss.font_shipping_bar }};
{% endif %}
width: 100%;
}

.quantity-box-{{ si }} {
  display: flex;
  align-items: center;
  justify-content: center;
  {% if ss.font_inputs contains '#' %} color: {{ ss.font_inputs }};
{% endif %}
border: 1px solid{% if ss.font_inputs contains '#' %}{{ ss.font_inputs }}
80{% endif %};
border-radius: {{ ss.radius_inputs }}px;
background: {{ ss.background_inputs }};
margin-top: 10px;
}

.quantity-remove-{{ si }} {
  display: flex;
  flex-direction: column;
}


.quantity-{{ si }} {
  width: 30px;
  height: 30px;
  margin-left: auto;
  text-align: center;
  margin-bottom: 0 !important;
  border: none;
  background: {{ ss.background_inputs }};
  {% if ss.font_inputs contains '#' %} color: {{ ss.font_inputs }};
{% endif %}
padding: 0 !important;
border: none !important;
box-shadow: none !important;
}

[name="plus"],
[name="minus"] {
  padding: 0 8px;
  cursor: pointer;
}

.remove-{{ si }} {
  cursor: pointer;
  pointer-events: auto;
  margin: 5px auto auto;
  font-size: small;
}

.open-cart-{{ si }} {
  width: min(100vw, {{ss.drawer_width}}px);
  @media(max-width: 500px) {
    width: min({{ss.drawer_width_mobile}}vw, {{ss.drawer_width}}px);
  }
  transition: width 0.3s ease;
}

.show-background-{{ si }} {
  opacity: 1;
  pointer-events: auto;
}

.grid-animation-{{ si }} {
  height: 0;
  overflow: hidden;
}

/* Chrome, Safari, Edge, Opera */
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

/* Firefox */
input[type=number] {
  -moz-appearance: textfield;
}

.no-shadow-{{ si }} {
  box-shadow: none;
}

.fade-in-{{ si }} {
  opacity: 1;
  transition: opacity 0.3s ease 0.3s;
}

.no-scroll-{{ si }} {
  overflow: hidden !important;
}

.properties-{{ si }} {
  {% if ss.font_product_card contains '#' %} color: {{ ss.font_product_card }}
  80;
{% endif %}
font-size: small;
}

.discount-{{ si }} {
  margin-left: auto;
  font-size: 10px;
  background: {% if ss.font_product_card contains '#' %}{{ ss.font_product_card }}33{% else %}#00000033{% endif %};
  border: 1px solid{% if ss.font_product_card contains '#' %}{{ ss.font_product_card }}{% endif %};
  padding: 0 15px;
  border-radius: 30px;
  width: fit-content;
  display: flex;
  gap: 5px;
}

.crossed-price-{{ si }} {
  {% if ss.font_compare_at_price contains '#' %}
    color: {{ ss.font_compare_at_price }};
  {% else %}
    color: #B64343;
  {% endif %}
  text-decoration: line-through;
  font-size: small;
  margin-right: 5px;
}


.varianten-{{ si }} {
  position: relative;
  margin-top: 5px;
  width: fit-content;
}

.variante-{{ si }} {
  padding: 2px 2px 2px 1rem;
  max-width: 120px;
  font-size: 12px !important;
  @media (max-width: 500px) {
    max-width: 110px;
  }
  border: 1px solid{% if ss.font_inputs contains '#' %}{{ ss.font_inputs }}
  80{% endif %};
  border-radius: {{ ss.radius_inputs }}px;
  background: {{ ss.background_inputs }};
  appearance: none;
  {% if ss.font_inputs contains '#' %} color: {{ ss.font_inputs }};
{% endif %}
}


.chevrone-{{ si }} {
  height: 18px;
  position: absolute;
  top: 50%;
  right: 5px;
  z-index: 5;
  transform: translateY(-50%);
  pointer-events: none;
}


{{ ss.old_cart }} {
  display: none !important;
}

/* Hide the old cart drawer and related elements */
#site-cart-sidebar,
.sidebar--right[data-js-site-cart-sidebar],
.site-overlay[data-js-site-overlay] {
  display: none !important;
  visibility: hidden !important;
  opacity: 0 !important;
  pointer-events: none !important;
}

/* Prevent the old cart from showing */
.sidebar.sidebar--opened[data-js-site-cart-sidebar] {
  transform: translateX(100%) !important;
}

.products-enter-active,
.products-leave-active {
  transition: all 0.5s ease;
}

.products-enter-from,
.products-leave-to {
  opacity: 0;
  transform: translateX(-50px);
}

.sh-cart-tolle-wahl-modul {
  color: #2a555a;
  /* Textfarbe ändern */
  min-height: 60px;
  background: #f2faf5;
  /* Hintergrundfarbe ändern */
  padding: 5px 15px;
  /* Innenabstand oben ändern */ /* Innenabstand unten ändern */ /* Innenabstand links ändern */ /* Innenabstand rechts ändern */
  font-size: 14px;
  /* Schriftgröße ändern */
  text-align: center;
  /* Textausrichtung ändern */
  border-radius: 5px;
  /* Abrundung der Ecken ändern */
  gap: 8px;
  /* Abstand zwischen Icon und Text */
  justify-content: center;
  /* Horizontale Zentrierung von Icon und Text */
  align-items: center;
  /* Vertikale Ausrichtung von Icon und Text */
  display: flex;
  width: 100%;
  /* Füllt die volle Breite des umgebenden Containers aus */
  max-width: 1200px;
  /* Begrenzung der maximalen Breite */
  margin: 0 auto;
  /* Zentriert den Container, wenn max-width greift */
  box-sizing: border-box;
  /* Berücksichtigt Padding in der Breitenberechnung */
}

.sh-icon-check {
  color: #2a555a;
  /* Farbe des Icons ändern */
  width: 25px;
  /* Größe des Icons ändern */
  flex-shrink: 0;
  /* Verhindert, dass das Icon schrumpft */
}

.sh-cart-tolle-wahl-modul p {
  margin: 0;
  /* Entfernt den Standardabstand von <p> */
}

/* Accessibility styles */
.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

[name="plus"],
[name="minus"] {
  padding: 0 8px;
  cursor: pointer;
  user-select: none;
}

[name="plus"]:focus-visible,
[name="minus"]:focus-visible,
.circle-button-{{ si }}:focus-visible,
.remove-{{ si }}:focus-visible,
.order-note-footer-{{ si }}:focus-visible {
  outline: 2px solid #000;
  outline-offset: 2px;
}

.quantity-{{ si }}:focus-visible,
.variante-{{ si }}:focus-visible {
  outline: 2px solid #000;
  outline-offset: 0;
}

.quantity-box-button-{{ si }} {
  font-size: 1.6rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Only pulse the next threshold */
.circle-bubble-{{ si }}.next-threshold .pulse-dot-{{ si }} {
  animation: pulse-{{ si }} 2s infinite;
}

/* Disable pulse for all other thresholds */
.circle-bubble-{{ si }}:not(.next-threshold) .pulse-dot-{{ si }} {
  animation: none !important;
}

@keyframes pulse-{{ si }} {
  0% {
    transform: scale(0.95);
    box-shadow: 0 0 0 0 rgba(0, 0, 0, 0.7);
  }
  70% {
    transform: scale(1);
    box-shadow: 0 0 0 10px rgba(0, 0, 0, 0);
  }
  100% {
    transform: scale(0.95);
    box-shadow: 0 0 0 0 rgba(0, 0, 0, 0);
  }
}

.progress-bar-{{ si }} {
  width: 100%;
  height: 10px;
  background: {{ ss.background_shipping_bar }};
  position: relative;
}

.progress-{{ si }} {
  height: 100%;
  background: #D98B99;
  display: block !important;
  transition: width 1s ease;
}

.progress-{{ si }} {
  height: 100%;
  background: #D98B99;
  display: block !important;
  transition: width 1s ease;
}

.shipping-bar-text-{{ si }} {
  {% if ss.font_shipping_bar contains '#' %} color: {{ ss.font_shipping_bar }};
{% endif %}
width: 100%;
}

.quantity-box-{{ si }} {
  display: flex;
  align-items: center;
  justify-content: center;
  {% if ss.font_inputs contains '#' %} color: {{ ss.font_inputs }};
{% endif %}
border: 1px solid{% if ss.font_inputs contains '#' %}{{ ss.font_inputs }}
80{% endif %};
border-radius: {{ ss.radius_inputs }}px;
background: {{ ss.background_inputs }};
margin-top: 10px;
}

.quantity-remove-{{ si }} {
  display: flex;
  flex-direction: column;
}


.quantity-{{ si }} {
  width: 30px;
  height: 30px;
  margin-left: auto;
  text-align: center;
  margin-bottom: 0 !important;
  border: none;
  background: {{ ss.background_inputs }};
  {% if ss.font_inputs contains '#' %} color: {{ ss.font_inputs }};
{% endif %}
padding: 0 !important;
border: none !important;
box-shadow: none !important;
}

[name="plus"],
[name="minus"] {
  padding: 0 8px;
  cursor: pointer;
}

.remove-{{ si }} {
  cursor: pointer;
  pointer-events: auto;
  margin: 5px auto auto;
  font-size: small;
}

.open-cart-{{ si }} {
  width: min(100vw, {{ss.drawer_width}}px);
  @media(max-width: 500px) {
    width: min({{ss.drawer_width_mobile}}vw, {{ss.drawer_width}}px);
  }
  transition: width 0.3s ease;
}

.show-background-{{ si }} {
  opacity: 1;
  pointer-events: auto;
}

.grid-animation-{{ si }} {
  height: 0;
  overflow: hidden;
}

/* Chrome, Safari, Edge, Opera */
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

/* Firefox */
input[type=number] {
  -moz-appearance: textfield;
}

.no-shadow-{{ si }} {
  box-shadow: none;
}

.fade-in-{{ si }} {
  opacity: 1;
  transition: opacity 0.3s ease 0.3s;
}

.no-scroll-{{ si }} {
  overflow: hidden !important;
}

.properties-{{ si }} {
  {% if ss.font_product_card contains '#' %} color: {{ ss.font_product_card }}
  80;
{% endif %}
font-size: small;
}

.discount-{{ si }} {
  margin-left: auto;
  font-size: 10px;
  background: {% if ss.font_product_card contains '#' %}{{ ss.font_product_card }}33{% else %}#00000033{% endif %};
  border: 1px solid{% if ss.font_product_card contains '#' %}{{ ss.font_product_card }}{% endif %};
  padding: 0 15px;
  border-radius: 30px;
  width: fit-content;
  display: flex;
  gap: 5px;
}

.crossed-price-{{ si }} {
  {% if ss.font_compare_at_price contains '#' %}
    color: {{ ss.font_compare_at_price }};
  {% else %}
    color: #B64343;
  {% endif %}
  text-decoration: line-through;
  font-size: small;
  margin-right: 5px;
}


.varianten-{{ si }} {
  position: relative;
  margin-top: 5px;
  width: fit-content;
}

.variante-{{ si }} {
  padding: 2px 2px 2px 1rem;
  max-width: 120px;
  font-size: 12px !important;
  @media (max-width: 500px) {
    max-width: 110px;
  }
  border: 1px solid{% if ss.font_inputs contains '#' %}{{ ss.font_inputs }}
  80{% endif %};
  border-radius: {{ ss.radius_inputs }}px;
  background: {{ ss.background_inputs }};
  appearance: none;
  {% if ss.font_inputs contains '#' %} color: {{ ss.font_inputs }};
{% endif %}
}


.chevrone-{{ si }} {
  height: 18px;
  position: absolute;
  top: 50%;
  right: 5px;
  z-index: 5;
  transform: translateY(-50%);
  pointer-events: none;
}


{{ ss.old_cart }} {
  display: none !important;
}

/* Hide the old cart drawer and related elements */
#site-cart-sidebar,
.sidebar--right[data-js-site-cart-sidebar],
.site-overlay[data-js-site-overlay] {
  display: none !important;
  visibility: hidden !important;
  opacity: 0 !important;
  pointer-events: none !important;
}

/* Prevent the old cart from showing */
.sidebar.sidebar--opened[data-js-site-cart-sidebar] {
  transform: translateX(100%) !important;
}

.products-enter-active,
.products-leave-active {
  transition: all 0.5s ease;
}

.products-enter-from,
.products-leave-to {
  opacity: 0;
  transform: translateX(-50px);
}

.sh-cart-tolle-wahl-modul {
  color: #2a555a;
  /* Textfarbe ändern */
  min-height: 60px;
  background: #f2faf5;
  /* Hintergrundfarbe ändern */
  padding: 5px 15px;
  /* Innenabstand oben ändern */ /* Innenabstand unten ändern */ /* Innenabstand links ändern */ /* Innenabstand rechts ändern */
  font-size: 14px;
  /* Schriftgröße ändern */
  text-align: center;
  /* Textausrichtung ändern */
  border-radius: 5px;
  /* Abrundung der Ecken ändern */
  gap: 8px;
  /* Abstand zwischen Icon und Text */
  justify-content: center;
  /* Horizontale Zentrierung von Icon und Text */
  align-items: center;
  /* Vertikale Ausrichtung von Icon und Text */
  display: flex;
  width: 100%;
  /* Füllt die volle Breite des umgebenden Containers aus */
  max-width: 1200px;
  /* Begrenzung der maximalen Breite */
  margin: 0 auto;
  /* Zentriert den Container, wenn max-width greift */
  box-sizing: border-box;
  /* Berücksichtigt Padding in der Breitenberechnung */
}

.sh-icon-check {
  color: #2a555a;
  /* Farbe des Icons ändern */
  width: 25px;
  /* Größe des Icons ändern */
  flex-shrink: 0;
  /* Verhindert, dass das Icon schrumpft */
}

.sh-cart-tolle-wahl-modul p {
  margin: 0;
  /* Entfernt den Standardabstand von <p> */
}

/* Accessibility styles */
.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

[name="plus"],
[name="minus"] {
  padding: 0 8px;
  cursor: pointer;
  user-select: none;
}

[name="plus"]:focus-visible,
[name="minus"]:focus-visible,
.circle-button-{{ si }}:focus-visible,
.remove-{{ si }}:focus-visible,
.order-note-footer-{{ si }}:focus-visible {
  outline: 2px solid #000;
  outline-offset: 2px;
}

.quantity-{{ si }}:focus-visible,
.variante-{{ si }}:focus-visible {
  outline: 2px solid #000;
  outline-offset: 0;
}

.quantity-box-button-{{ si }} {
  font-size: 1.6rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Only pulse the next threshold */
.circle-bubble-{{ si }}.next-threshold .pulse-dot-{{ si }} {
  animation: pulse-{{ si }} 2s infinite;
}

/* Disable pulse for all other thresholds */
.circle-bubble-{{ si }}:not(.next-threshold) .pulse-dot-{{ si }} {
  animation: none !important;
}

@keyframes pulse-{{ si }} {
  0% {
    transform: scale(0.95);
    box-shadow: 0 0 0 0 rgba(0, 0, 0, 0.7);
  }
  70% {
    transform: scale(1);
    box-shadow: 0 0 0 10px rgba(0, 0, 0, 0);
  }
  100% {
    transform: scale(0.95);
    box-shadow: 0 0 0 0 rgba(0, 0, 0, 0);
  }
}

.payment-icons__icon {
  display: none;
}

/* Discount Code Styles */
.discount-code-container-{{ si }} {
  width: 100%;
  margin-bottom: 15px;
}

.discount-code-container-{{ si }} .h3 {
  margin: 0 0 10px 0;
  font-size: 14px;
  font-weight: 600;
  color: #333;
}

.cart-discount-{{ si }}.input-wrapper {
  display: flex;
  gap: 10px;
  align-items: center;
  width: 100%;
  max-width: 100%;
}

.discount-input-{{ si }} {
  flex: 1;
  padding: 10px 12px;
  border: 1px solid #ddd;
  font-size: 14px;
  background-color: #f5f5f5;
  min-width: 0;
  max-width: 100%;
  flex: 1 1 auto;
}

.discount-input-{{ si }}:focus {
  outline: none;
  border-color: #000;
}

.apply-btn-wrapper-{{ si }} {
  flex-shrink: 0;
  min-width: 80px;
}

.apply-discount-code-{{ si }} {
  padding: 10px 16px;
  background-color: #000;
  color: #fff;
  border: none;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.apply-discount-code-{{ si }}:hover:not(:disabled) {
  background-color: #333;
}

.apply-discount-code-{{ si }}:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.apply-discount-code-{{ si }}.loading {
  position: relative;
  color: transparent;
  min-width: 80px;
  overflow: hidden;
}

.apply-discount-code-{{ si }}.loading::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 16px;
  height: 16px;
  margin: -8px 0 0 -8px;
  border: 2px solid #fff;
  border-radius: 50%;
  border-top-color: transparent;
  animation: spin-{{ si }} 1s linear infinite;
}

@keyframes spin-{{ si }} {
  to {
    transform: rotate(360deg);
  }
}

.discount-message-{{ si }} {
  margin-top: 8px;
  padding: 8px 12px;
  font-size: 13px;
  font-weight: 500;
}

.discount-message-{{ si }}.success {
  background-color: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.discount-message-{{ si }}.error {
  background-color: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

/* Cart item discount styling */
.cart__discount-{{ si }} {
  display: inline-flex;
  align-items: center;
  gap: 2px;
  justify-content: flex-start;
  margin-top: 2px;
  padding: 2px 6px;
  border-radius: 12px;
  background-color: #f5f5f5;
  font-size: 12px;
  color: #000;
  font-weight: 500;
  width: fit-content;
}

.cart__discount-{{ si }} svg {
  flex-shrink: 0;
}

.discount-name-{{ si }} {
  font-weight: 600;

  margin: 0 4px;
}

/* Applied discount styling */
.applied-discount-{{ si }} {
  margin-bottom: 15px;
  padding: 12px 15px;
  background-color: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 6px;
  border-left: 4px solid #28a745;
}

.applied-discount-header {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  font-weight: 600;
  color: #28a745;
}

.applied-discount-text {
  font-size: 14px;
  font-weight: 600;
  color: #28a745;
}

.applied-discount-codes {
  display: flex;
  flex-wrap: wrap;
  gap: 6px;
}

.applied-discount-code {
  display: inline-block;
  padding: 4px 8px;
  background-color: #28a745;
  color: white;
  font-size: 12px;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

/* Bulk shipment note styling */
.cart__bulk-shipment-note {
  margin: 10px 0;
  padding: 10px 15px;
  background-color: #f8f9fa;
  border: 1px solid #e9ecef;
}

.bulk-shipment-note-content {
  color: #555;
  font-size: 12px;
  font-weight: 300;
  margin: 0;
  text-align: center;
}

/* Empty Cart Styles */
.empty-cart-content-{{ si }} {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
  padding: 40px 20px;
  text-align: center;
}

.empty-cart-icon-{{ si }} {
  margin-bottom: 20px;
  color: #ccc;
}

.empty-cart-subtitle-{{ si }} {
  margin: 10px 0 30px 0;
  color: #666;
  font-size: 14px;
}

.empty-cart-button-{{ si }} {
  min-width: 200px;
  text-align: center;
  line-height: 2;
}

/* Applied Discount Styles */
.applied-discount-{{ si }} {
  margin-bottom: 15px;
  padding: 12px 15px;
  background-color: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 6px;
  border-left: 4px solid #28a745;
}

.applied-discount-header {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  font-weight: 600;
  color: #28a745;
}

.applied-discount-text {
  font-size: 14px;
  font-weight: 600;
  color: #28a745;
}

.applied-discount-codes {
  display: flex;
  flex-wrap: wrap;
  gap: 6px;
  margin-bottom: 10px;
}

.applied-discount-code {
  display: inline-block;
  padding: 4px 8px;
  background-color: #28a745;
  color: white;
  font-size: 12px;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

/* Discount Success Display */
.discount-success-{{ si }} {
  padding: 12px 15px;
  background-color: #d4edda;
  border: 1px solid #c3e6cb;
  border-radius: 6px;
}

.discount-success-{{ si }} .applied-discount-header {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  font-weight: 600;
  color: #155724;
}

.remove-discount-btn-{{ si }} {
  background: none;
  border: 1px solid #dc3545;
  color: #dc3545;
  padding: 4px 8px;
  font-size: 12px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.remove-discount-btn-{{ si }}:hover {
  background-color: #dc3545;
  color: white;
}

.remove-discount-btn-{{ si }}:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Discount Code Styles */
.discount-code-container-{{ si }} {
  margin-bottom: 15px;
  border-radius: 8px;
}

.cart-discount-{{ si }} {
  display: flex;
  gap: 10px;
  align-items: center;
}

.discount-input-{{ si }} {
  flex: 1;
  padding: 10px 12px;
  border: 1px solid #ddd;
  font-size: 14px;
}

.discount-input-{{ si }}:focus {
  outline: none;
  border-color: #007cba;
  box-shadow: 0 0 0 2px rgba(0, 124, 186, 0.2);
}

.apply-btn-wrapper-{{ si }} {
  flex-shrink: 0;
}

.apply-discount-code-{{ si }} {
  padding: 10px 16px;
  background-color: #000;
  color: white;
  border: none;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.apply-discount-code-{{ si }}:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.apply-discount-code-{{ si }}.loading {
  position: relative;
  color: transparent;
}

.apply-discount-code-{{ si }}.loading::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 16px;
  height: 16px;
  margin: -8px 0 0 -8px;
  border: 2px solid transparent;
  border-top: 2px solid white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.discount-message-{{ si }} {
  margin-top: 10px;
  padding: 8px 12px;
  font-size: 14px;
  font-weight: 500;
}

.discount-message-{{ si }}.success {
  background-color: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.discount-message-{{ si }}.error {
  background-color: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

.cart__discount-{{ si }} {
  display: flex;
  align-items: center;
  gap: 4px;
  margin-top: 4px;
  font-size: 12px;
  font-weight: 500;
}

.discount-name-{{ si }} {
  font-weight: 600;
}

</style>

{% schema %}
  {
    "name": "Dynamischer Warenkorb",
    "presets": [
      {
        "name": "Dynamischer Warenkorb"
      }
    ],
    "settings": [
      {
        "type": "header",
        "content": "Empfohlene Produkte"
      },
      {
        "type": "text",
        "id": "recommendations_title",
        "label": "Titel für Empfehlungen",
        "default": "Für dich vorgeschlagen"
      },
      {
        "type": "product_list",
        "id": "recommendations",
        "label": "Produktempfehlungen",
        "limit": 8
      },
      {
        "type": "checkbox",
        "id": "use_recommended",
        "label": "Empfohlene Produkte API verwenden",
        "default": true
      }, {
        "type": "checkbox",
        "id": "slider_sticky",
        "label": "Slider klebrig",
        "default": false
      }, {
        "type": "header",
        "content": "Bestellnotiz"
      }, {
        "type": "checkbox",
        "id": "order_note",
        "label": "Bestellnotiz anzeigen",
        "default": false
      }, {
        "type": "text",
        "id": "order_note_footer_text",
        "label": "Bestellnotiz Fußtext",
        "default": "Notiz hinzufügen"
      }, {
        "type": "text",
        "id": "order_note_heading",
        "label": "Bestellnotiz Überschrift",
        "default": "Möchtest du uns noch etwas mitteilen?"
      }, {
        "type": "text",
        "id": "order_note_confirm",
        "label": "Bestellnotiz Bestätigungstext",
        "default": "Speichern"
      }, {
        "type": "header",
        "content": "Versand"
      }, {
        "type": "checkbox",
        "id": "enable_free_shipping",
        "label": "Kostenlosen Versand aktivieren",
        "default": true
      }, {
        "type": "number",
        "id": "freeshipping",
        "label": "Kostenloser Versand ab ... in Cent",
        "default": 5000,
        "visible_if": "{{ section.settings.enable_free_shipping }}"
      }, {
        "type": "text",
        "id": "fs_not_reached",
        "label": "Kostenloser Versand noch nicht erreicht",
        "default": "Nur noch price bis zum kostenlosen Versand!",
        "info": "Geben Sie 'price' ein, um den verbleibenden Betrag anzuzeigen.",
        "visible_if": "{{ section.settings.enable_free_shipping }}"
      }, {
        "type": "text",
        "id": "fs_reached",
        "label": "Kostenloser Versand erreicht",
        "default": "Deine Bestellung ist Versandkostenfrei",
        "visible_if": "{{ section.settings.enable_free_shipping }}"
      }, {
        "type": "header",
        "content": "Kostenloses Geschenk"
      }, {
        "type": "checkbox",
        "id": "enable_free_gift",
        "label": "Kostenloses Geschenk aktivieren",
        "default": true
      }, {
        "type": "product",
        "id": "free_gift_product",
        "label": "Kostenloses Geschenk Produkt"
      }, {
        "type": "number",
        "id": "free_gift_threshold",
        "label": "Kostenloses Geschenk ab ... in Cent",
        "default": 10000,
        "visible_if": "{{ section.settings.enable_free_gift }}"
      }, {
        "type": "text",
        "id": "gift_not_reached",
        "label": "Kostenloses Geschenk noch nicht erreicht",
        "default": "Nur noch price bis zum kostenlosen Geschenk!",
        "info": "Geben Sie 'price' ein, um den verbleibenden Betrag anzuzeigen.",
        "visible_if": "{{ section.settings.enable_free_gift }}"
      }, {
        "type": "text",
        "id": "gift_reached",
        "label": "Kostenloses Geschenk erreicht",
        "default": "Du erhälst ein kostenloses Geschenk",
        "visible_if": "{{ section.settings.enable_free_gift }}"
      }, {
        "type": "header",
        "content": "Zweites kostenloses Geschenk"
      }, {
        "type": "checkbox",
        "id": "enable_second_free_gift",
        "label": "Zweites kostenloses Geschenk aktivieren",
        "default": false
      }, {
        "type": "product",
        "id": "second_free_gift_product",
        "label": "Zweites kostenloses Geschenk Produkt"
      }, {
        "type": "number",
        "id": "second_free_gift_threshold",
        "label": "Zweites kostenloses Geschenk ab ... in Cent",
        "default": 15000,
        "visible_if": "{{ section.settings.enable_second_free_gift }}"
      }, {
        "type": "text",
        "id": "second_gift_reached",
        "label": "Zweites kostenloses Geschenk erreicht",
        "default": "Du erhälst ein zweites kostenloses Geschenk",
        "visible_if": "{{ section.settings.enable_second_free_gift }}"
      }, {
        "type": "text",
        "id": "second_gift_not_reached",
        "label": "Zweites kostenloses Geschenk noch nicht erreicht",
        "default": "Du bist nur price vom zweiten Geschenk entfernt!",
        "info": "Geben Sie 'price' ein, um den verbleibenden Betrag anzuzeigen.",
        "visible_if": "{{ section.settings.enable_second_free_gift }}"
      }, {
        "type": "text",
        "id": "shipping_fee_text",
        "label": "Versandkosten Text im Warenkorb-Footer",
        "default": "Versandkosten (DE)"
      }, {
        "type": "text",
        "id": "shipping_is_free",
        "label": "Versand ist kostenlos Text im Warenkorb-Footer",
        "default": "Kostenlos"
      }, {
        "type": "header",
        "content": "Express-Versand (als Produkt)"
      }, {
        "type": "product",
        "id": "express_shipping",
        "label": "Express-Versand Produkt"
      }, {
        "type": "header",
        "content": "Texte"
      }, {
        "type": "text",
        "id": "cart_heading",
        "label": "Warenkorb Überschrift",
        "default": "Warenkorb"
      }, {
        "type": "text",
        "id": "empty_cart",
        "label": "Leerer Warenkorb Text",
        "default": "Dein Warenkorb ist leer"
      }, {
        "type": "text",
        "id": "empty_cart_button",
        "label": "Leerer Warenkorb Button",
        "default": "Produkte entdecken"
      }, {
        "type": "text",
        "id": "subtotal",
        "label": "Zwischensumme",
        "default": "Zwischensumme"
      }, {
        "type": "text",
        "id": "checkout_button_text",
        "label": "Zur Kasse Button Text",
        "default": "Jetzt sicher zur Kasse"
      }, {
        "type": "text",
        "id": "remove_text",
        "label": "Entfernen Button",
        "default": "Entfernen"
      }, {
        "type": "header",
        "content": "CSS-Selektoren"
      }, {
        "type": "text",
        "id": "old_cart",
        "label": "Alten Warenkorb-Drawer ausblenden",
        "default": "#site-cart-sidebar"
      }, {
        "type": "text",
        "id": "button_class",
        "label": "Button Klasse",
        "default": ".button"
      }, {
        "type": "text",
        "id": "cart_icon_class",
        "label": "Warenkorb Icon Klasse",
        "default": ".cart-icon"
      }, {
        "type": "text",
        "id": "cart_count_bubble_class",
        "label": "Warenkorb Anzahl Blase Klasse",
        "default": ".cart-count-bubble"
      }, {
        "type": "text",
        "id": "add_to_cart_class",
        "label": "In den Warenkorb Klasse",
        "default": "#AddToCart"
      }, {
        "type": "header",
        "content": "Gestaltung"
      }, {
        "type": "range",
        "id": "drawer_width",
        "min": 400,
        "max": 700,
        "step": 10,
        "unit": "px",
        "label": "Maximale Breite des Drawers",
        "default": 600
      }, {
        "type": "range",
        "id": "drawer_width_mobile",
        "min": 75,
        "max": 100,
        "step": 1,
        "unit": "%",
        "label": "Maximale Breite des Drawers mobil",
        "default": 90
      }, {
        "type": "header",
        "content": "Hintergründe"
      }, {
        "type": "color",
        "id": "background_header",
        "label": "Header",
        "default": "#ffffff"
      }, {
        "type": "color",
        "id": "background_footer",
        "label": "Footer",
        "default": "#f5f4eb"
      }, {
        "type": "color",
        "id": "background_main",
        "label": "Hauptbereich",
        "default": "#ffffff"
      }, {
        "type": "color",
        "id": "background_shipping_bar_container",
        "label": "Versandleiste Container",
        "default": "#ffffff"
      }, {
        "type": "color",
        "id": "background_shipping_bar",
        "label": "Versandleiste",
        "default": "#D1D1D1"
      }, {
        "type": "color",
        "id": "background_shipping_progress",
        "label": "Versand Fortschritt",
        "default": "#000000"
      }, {
        "type": "color",
        "id": "background_product_card",
        "label": "Produktkarte"
      }, {
        "type": "color",
        "id": "background_slider",
        "label": "Slider"
      }, {
        "type": "color",
        "id": "background_slider_card_arrows",
        "label": "Slider Karte und Pfeile"
      }, {
        "type": "color",
        "id": "background_slider_button",
        "label": "Slider Button"
      }, {
        "type": "color",
        "id": "background_express_shipping",
        "label": "Express-Versand"
      }, {
        "type": "color",
        "id": "background_order_note_button",
        "label": "Bestellnotiz Button"
      }, {
        "type": "color",
        "id": "background_order_note",
        "label": "Bestellnotiz"
      }, {
        "type": "color",
        "id": "background_inputs",
        "label": "Eingabefelder",
        "default": "#ffffff"
      }, {
        "type": "header",
        "content": "Schriftarten"
      }, {
        "type": "color",
        "id": "font_header_icon",
        "label": "Header Icon",
        "default": "#ffffff"
      }, {
        "type": "color",
        "id": "font_header_footer",
        "label": "Header/Footer",
        "default": "#000000"
      }, {
        "type": "color",
        "id": "font_shipping_bar",
        "label": "Versandleiste",
        "default": "#000000"
      }, {
        "type": "color",
        "id": "font_product_card",
        "label": "Produktkarte",
        "default": "#000000"
      }, {
        "type": "color",
        "id": "font_compare_at_price",
        "label": "Vergleichspreis"
      }, {
        "type": "color",
        "id": "font_slider_heading",
        "label": "Slider Überschrift"
      }, {
        "type": "color",
        "id": "font_slider_card_arrows",
        "label": "Slider Karte und Pfeile"
      }, {
        "type": "color",
        "id": "font_slider_button",
        "label": "Slider Button",
        "default": "#ffffff"
      }, {
        "type": "color",
        "id": "font_express_shipping",
        "label": "Express-Versand"
      }, {
        "type": "color",
        "id": "font_order_note_button",
        "label": "Bestellnotiz Button"
      }, {
        "type": "color",
        "id": "font_order_note",
        "label": "Bestellnotiz"
      }, {
        "type": "color",
        "id": "font_inputs",
        "label": "Eingabefelder"
      }, {
        "type": "header",
        "content": "Rahmenfarbe und Schatten"
      }, {
        "type": "color",
        "id": "shadow_header_footer",
        "label": "Header/Footer",
        "default": "#EFEFEF"
      }, {
        "type": "range",
        "id": "alpha_header_footer",
        "min": 0,
        "max": 1,
        "step": 0.1,
        "label": "Header/Footer Schatten Transparenz",
        "default": 0
      }, {
        "type": "color",
        "id": "shadow_product_card",
        "label": "Produktkarte Element",
        "default": "#ffffff"
      }, {
        "type": "range",
        "id": "alpha_product_card",
        "min": 0,
        "max": 1,
        "step": 0.1,
        "label": "Produktkarte Element Schatten Transparenz",
        "default": 1
      }, {
        "type": "color",
        "id": "shadow_product_card_slider",
        "label": "Produktkarte Slider",
        "default": "#ffffff"
      }, {
        "type": "range",
        "id": "alpha_product_card_slider",
        "min": 0,
        "max": 1,
        "step": 0.1,
        "label": "Produktkarte Slider Schatten Transparenz",
        "default": 0
      }, {
        "type": "header",
        "content": "Rahmenradius"
      }, {
        "type": "range",
        "id": "radius_header_footer",
        "min": 0,
        "max": 20,
        "step": 1,
        "unit": "px",
        "label": "Header/Footer",
        "default": 0
      }, {
        "type": "range",
        "id": "radius_shipping_bar_container",
        "min": 0,
        "max": 20,
        "step": 1,
        "unit": "px",
        "label": "Versandleiste Container",
        "default": 0
      }, {
        "type": "range",
        "id": "radius_product_card",
        "min": 0,
        "max": 20,
        "step": 1,
        "unit": "px",
        "label": "Produktkarte",
        "default": 0
      }, {
        "type": "range",
        "id": "radius_product_image",
        "min": 0,
        "max": 20,
        "step": 1,
        "unit": "px",
        "label": "Produktbild",
        "default": 0
      }, {
        "type": "range",
        "id": "radius_slider_product_card",
        "min": 0,
        "max": 20,
        "step": 1,
        "unit": "px",
        "label": "Slider Produktkarte",
        "default": 0
      }, {
        "type": "range",
        "id": "radius_slider_product_image",
        "min": 0,
        "max": 20,
        "step": 1,
        "unit": "px",
        "label": "Slider Produktbild",
        "default": 0
      }, {
        "type": "range",
        "id": "radius_order_note_button",
        "min": 0,
        "max": 20,
        "step": 1,
        "unit": "px",
        "label": "Bestellnotiz Button",
        "default": 0
      }, {
        "type": "range",
        "id": "radius_order_note",
        "min": 0,
        "max": 20,
        "step": 1,
        "unit": "px",
        "label": "Bestellnotiz",
        "default": 0
      }, {
        "type": "range",
        "id": "radius_inputs",
        "min": 0,
        "max": 20,
        "step": 1,
        "unit": "px",
        "label": "Eingabefelder",
        "default": 0
      }, {
        "type": "header",
        "content": "B2B Kunden-Einstellungen"
      }, {
        "type": "text",
        "id": "b2b_customer_tag",
        "label": "B2B Kunden-Tag",
        "default": "b2b",
        "info": "Kunden mit diesem Tag sehen die Fortschrittsleiste und kostenlose Geschenk-Funktionen nicht"
      }, {
        "type": "header",
        "content": "Versandraten-Konfiguration"
      }, {
        "type": "paragraph",
        "content": "Fügen Sie Versandraten mit den Blöcken unten hinzu. Wenn keine Blöcke hinzugefügt werden, werden Standardraten verwendet."
      }, {
        "type": "checkbox",
        "id": "show_payment_icons",
        "label": "Zahlungsicons anzeigen",
        "default": false
      }
    ],
    "blocks": [
      {
        "type": "shipping_rate",
        "name": "Versandrate",
        "settings": [
          {
            "type": "text",
            "id": "country_code",
            "label": "Ländercode",
            "default": "DE",
            "info": "ISO-Ländercode (z.B. DE, AT, CH, EU)"
          },
          {
            "type": "text",
            "id": "country_name",
            "label": "Ländername",
            "default": "Deutschland",
            "info": "Anzeigename für das Land"
          },
          {
            "type": "number",
            "id": "price",
            "label": "Versandpreis (€)",
            "default": 5,
            "info": "Versandkosten in Euro"
          },
          {
            "type": "text",
            "id": "delivery_time",
            "label": "Lieferzeit",
            "default": "2-3 Werktage",
            "info": "Geschätzte Lieferzeit (optional)"
          }, {
            "type": "textarea",
            "id": "restrictions",
            "label": "Einschränkungen",
            "info": "Versandbeschränkungen oder Hinweise (optional)"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Dynamischer Warenkorb",
        "blocks": [
          {
            "type": "shipping_rate",
            "settings": {
              "country_code": "DE",
              "country_name": "Deutschland",
              "price": 5,
              "delivery_time": "2-3 Werktage"
            }
          }, {
            "type": "shipping_rate",
            "settings": {
              "country_code": "EU",
              "country_name": "Europa",
              "price": 8,
              "delivery_time": "3-5 Werktage"
            }
          }, {
            "type": "shipping_rate",
            "settings": {
              "country_code": "CH",
              "country_name": "Schweiz",
              "price": 15,
              "delivery_time": "3-7 Werktage"
            }
          }, {
            "type": "shipping_rate",
            "settings": {
              "country_code": "AT",
              "country_name": "Österreich",
              "price": 8,
              "delivery_time": "2-4 Werktage"
            }
          }
        ]
      }
    ]
  }
{% endschema %}
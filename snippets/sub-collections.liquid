{%- liquid
  capture gridView
    if sub_collection_links.size < per_row
      assign products_per_row = sub_collection_links.size
    else
      assign products_per_row = per_row
    endif
    render 'products_per_row', products_per_row: products_per_row, style: 'fractions'
  endcapture
-%}

<div class="subcollections-bubbles">
  <div class="subcollections-bubbles__inner">
    <div class="grid grid--uniform{% unless settings.collection_grid_gutter %} grid--no-gutters{% endunless %}" data-subcollections-slider="true">
      {%- for sub_collection_link in sub_collection_links -%}
        {%- if sub_collection_link.url contains '/collections/' -%}
          {%- liquid
            assign sub_collection_split = sub_collection_link.url | split: '/'
            assign sub_collection_handle = sub_collection_split | last
            assign sub_collection = collections[sub_collection_handle]
          -%}

          {%- if sub_collection != blank -%}
            {%- unless parent_url == sub_collection.url -%}
              {%- render 'collection-grid-item',
                collection: sub_collection,
                gridView: gridView,
                collection_title: sub_collection_link.title,
                per_row: per_row,
                sizeVariable: gridView,
                fallback: 'variable',
              -%}
            {%- endunless -%}
          {%- endif -%}
        {%- endif -%}
      {%- endfor -%}
    </div>
  </div>
</div>

<script>
  (function() {
    function setUniformCellWidth(grid) {
      if (!grid) return;
      try {
        var titleSpans = grid.querySelectorAll('.collection-item__title > span');
        if (!titleSpans || !titleSpans.length) return;
        var maxSpanWidth = 0;
        for (var i = 0; i < titleSpans.length; i++) {
          var span = titleSpans[i];
          var rect = span.getBoundingClientRect();
          var width = Math.ceil(rect.width || span.scrollWidth);
          if (width > maxSpanWidth) maxSpanWidth = width;
        }
        var requiredCellWidth = maxSpanWidth + 20; // account for 10px left/right in overlaid title
        var maxBubbleWidth = 145;
        if (requiredCellWidth > maxBubbleWidth) requiredCellWidth = maxBubbleWidth;
        var cells = grid.querySelectorAll('.grid__item');
        for (var j = 0; j < cells.length; j++) {
          cells[j].style.width = requiredCellWidth + 'px';
          cells[j].style.maxWidth = maxBubbleWidth + 'px';
          cells[j].style.flex = '0 0 auto';
        }
        if (grid._subcollectionsFlickity && typeof grid._subcollectionsFlickity.resize === 'function') {
          grid._subcollectionsFlickity.resize();
        }
      } catch (e) {}
    }

    function clearUniformCellWidth(grid) {
      if (!grid) return;
      var cells = grid.querySelectorAll('.grid__item');
      for (var i = 0; i < cells.length; i++) {
        cells[i].style.width = '';
        cells[i].style.maxWidth = '';
        cells[i].style.flex = '';
      }
    }

    function initOne(grid) {
      if (!grid || !window.Flickity) return;
      var instance = grid._subcollectionsFlickity;
      var isMobile = window.matchMedia('(max-width: 749px)').matches;

      if (isMobile) {
        if (!instance) {
          try {
            grid._subcollectionsFlickity = new Flickity(grid, {
              cellSelector: '.grid__item',
              cellAlign: 'left',
              contain: true,
              freeScroll: true,
              draggable: true,
              pageDots: false,
              prevNextButtons: false,
              wrapAround: false,
              adaptiveHeight: false,
            });
          } catch (e) {}
        }
        setUniformCellWidth(grid);
      } else {
        if (instance && typeof instance.destroy === 'function') {
          instance.destroy();
          grid._subcollectionsFlickity = null;
        }
        // Also normalize widths on desktop to avoid title clipping
        setUniformCellWidth(grid);
      }
    }

    function initAll(root) {
      var selector = '[data-subcollections-slider="true"]';
      var grids = root ? root.querySelectorAll(selector) : document.querySelectorAll(selector);
      if (!grids || !grids.length) return;
      for (var i = 0; i < grids.length; i++) initOne(grids[i]);
    }

    function onResize() { initAll(); }

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', function() { initAll(); });
    } else {
      initAll();
    }
    if (document.fonts && document.fonts.ready && typeof document.fonts.ready.then === 'function') {
      document.fonts.ready.then(function(){ initAll(); });
    }
    window.addEventListener('load', function(){ initAll(); setTimeout(initAll, 50); });

    window.addEventListener('resize', onResize);

    document.addEventListener('shopify:section:load', function(e) {
      var container = e && e.target ? e.target : null;
      if (container) initAll(container);
    });
  })();
</script>

<style>
  .subcollections-bubbles {
    background: #f3f3f3;
    padding: 20px 0px;
  }
  .subcollections-bubbles .grid {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
  }
  .subcollections-bubbles .grid .grid__item {
    max-width: 145px;
  }
  @media only screen and (max-width: 749px) {
    .subcollections-bubbles .grid {
      display: block;
    }
    .subcollections-bubbles .grid .grid__item {
      width: auto;
    }
    .subcollections-bubbles .grid .grid__item:first-child {
      margin-left: 17px;
    }
    .subcollections-bubbles .grid .grid__item:last-child {
      margin-right: 17px;
    }
  }
  .subcollections-bubbles .flickity-viewport {
    overflow: visible;
    height: 196.945px;
  }
</style>